{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/oasis/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/oasis/source/assets/rss.png","path":"assets/rss.png","modified":0,"renderable":1},{"_id":"themes/oasis/source/css/oasis.styl","path":"css/oasis.styl","modified":0,"renderable":1},{"_id":"themes/oasis/source/js/oasis.js","path":"js/oasis.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"58e75df9fe96d2be0321dc57e4de5d649dd544db","modified":1667115873234},{"_id":"source/_posts/js.md","hash":"6dd3b0ec9078c3154d7ba7944f76c67d8360cf5d","modified":1667116190059},{"_id":"themes/oasis/.editorconfig","hash":"57f50fc69fdc98a28c9bb04c338865a8b267b4bc","modified":1667112311086},{"_id":"themes/oasis/.gitignore","hash":"5251c1a3fa397b8480eaad958ba1b451d3193e6d","modified":1667112311087},{"_id":"themes/oasis/LICENSE","hash":"e095245f3582ed415785c21c92aa42f8eafcda0a","modified":1667112311087},{"_id":"themes/oasis/README.md","hash":"4cb136cd1f73914f6a59b00ff4e0f8bcbea5ee32","modified":1667112311088},{"_id":"themes/oasis/_config.yml","hash":"12258ebe59e8d50e0cb1affd91396d5eeeba0256","modified":1667112795640},{"_id":"themes/oasis/package.json","hash":"c40ab090fdd493c7798c1a500f1bfc34c8acd876","modified":1667112311093},{"_id":"themes/oasis/layout/category.pug","hash":"0dbdff98ac262fb7c5c11df7e2cd3bf9784fe693","modified":1667112311091},{"_id":"themes/oasis/layout/archive.pug","hash":"340372f6a2098480564764872f4f515a96404994","modified":1667112311090},{"_id":"themes/oasis/layout/index.pug","hash":"2fa380225ec4151d164bb9ed3821c7088225ea85","modified":1667112311091},{"_id":"themes/oasis/layout/page.pug","hash":"874b00a7a8e56d7649ce05d39c440804408624ee","modified":1667112311091},{"_id":"themes/oasis/layout/post.pug","hash":"8eb58c61314be7ec025b43ab01b74d80fc1647ac","modified":1667112311092},{"_id":"themes/oasis/scripts/pre.js","hash":"a0824f1626a284d7d261add7985285d50272c994","modified":1667112311094},{"_id":"themes/oasis/layout/tag.pug","hash":"946d045281783c148b5b182853ba9c5a15a49a92","modified":1667112311092},{"_id":"themes/oasis/source/favicon.ico","hash":"f0f567d3d61d4cd4e5296e2e89bdb1cd089c5375","modified":1667112311099},{"_id":"themes/oasis/layout/_includes/layout.pug","hash":"44d5a6e5ff15743193c75929cdd66a7ea8addb4d","modified":1667112311089},{"_id":"themes/oasis/layout/_includes/post_item.pug","hash":"a10ac724ae6cd7fd972d8a6f563550377fe739a4","modified":1667112311090},{"_id":"themes/oasis/layout/_includes/recent-posts.pug","hash":"83d10d686ba9bf5fa81a902b6ae54d004cbef9b1","modified":1667112311090},{"_id":"themes/oasis/source/assets/rss.png","hash":"986a959bb4d013181078c1086657cda1f12f56fa","modified":1667112311095},{"_id":"themes/oasis/source/css/_post.styl","hash":"4a5bc18f6673a22beb9de922aec908782e20fb39","modified":1667112311098},{"_id":"themes/oasis/source/css/oasis.styl","hash":"bdd099494b77b5e408465ec496ff4ed23944ed8b","modified":1667112311099},{"_id":"themes/oasis/source/js/oasis.js","hash":"f97a6f0be009f1cf3fb9c06d35b8506495b66ad1","modified":1667112311100},{"_id":"themes/oasis/source/css/_highlight/index.styl","hash":"52b6aa878be7dd43b1e3d11d37024fbc2d3673fc","modified":1667112311096},{"_id":"themes/oasis/source/css/_highlight/prismjs/diff.styl","hash":"b06cf37f95eb6b6e895502aeae43373bbe50d3da","modified":1667112311096},{"_id":"themes/oasis/source/css/_highlight/prismjs/index.styl","hash":"0adfc943288c10617f721c2418deb64aca0594fb","modified":1667112311097},{"_id":"themes/oasis/source/css/_highlight/prismjs/line-number.styl","hash":"4d30ad82f46cf8dd97830db9526379467eb74a80","modified":1667112311097},{"_id":"public/atom.xml","hash":"2ca9784f85c2847bdb39722912d3f44f686cbd54","modified":1667116227653},{"_id":"public/2022/10/25/hello-world/index.html","hash":"5f31f9fa1ddaeb8d7c2a710ed7b74f991b7d9f9e","modified":1667116227653},{"_id":"public/archives/index.html","hash":"dc45526ed9dd10e59e76287e755800348f424eb9","modified":1667116227653},{"_id":"public/archives/2022/index.html","hash":"02aab3b378fe2bdcae04d64ab56caaea79498bd6","modified":1667116227653},{"_id":"public/archives/2022/10/index.html","hash":"06710af93c58e02ed8ec20b145baad49ed92eb2a","modified":1667116227653},{"_id":"public/2022/10/30/js/index.html","hash":"0372e1c0ba5081688affef0840ea29597859b73a","modified":1667116227653},{"_id":"public/index.html","hash":"781e6ff9c8cd683141e9c3990726ec479f9cde43","modified":1667116227653},{"_id":"public/tags/JavaScript/index.html","hash":"382f4b782850aff52642e6ceae135b472053fcef","modified":1667116227653},{"_id":"public/favicon.ico","hash":"f0f567d3d61d4cd4e5296e2e89bdb1cd089c5375","modified":1667116227653},{"_id":"public/assets/rss.png","hash":"986a959bb4d013181078c1086657cda1f12f56fa","modified":1667116227653},{"_id":"public/js/oasis.js","hash":"0abdd1d44c2b88597c2809f45e91cac9a158fd8d","modified":1667116227653},{"_id":"public/css/oasis.css","hash":"7e1d581b19e67c8450c2b738566063f07f9d63a3","modified":1667116227653}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"回来咯","_content":"\n## 博客主题\n\n主要是【常用编程语言基础知识，计算机基础知识，项目设计实践，牛逼的游戏，牛逼的软件，生活经验和感悟】记录。\n\n## 杂谈\n\n老早之前就建好这个站了，不过嫌弃默认样式太丑又不会自定义，所以就没一直用下去\n\n这次学了一点前端回来捡起来这个站，当作一个安全的备份记录的地方，希望能早点把真真正正自己写的网站弄出来，暂时把这里当作主要阵地。","source":"_posts/hello-world.md","raw":"---\ntitle: 回来咯\n---\n\n## 博客主题\n\n主要是【常用编程语言基础知识，计算机基础知识，项目设计实践，牛逼的游戏，牛逼的软件，生活经验和感悟】记录。\n\n## 杂谈\n\n老早之前就建好这个站了，不过嫌弃默认样式太丑又不会自定义，所以就没一直用下去\n\n这次学了一点前端回来捡起来这个站，当作一个安全的备份记录的地方，希望能早点把真真正正自己写的网站弄出来，暂时把这里当作主要阵地。","slug":"hello-world","published":1,"date":"2022-10-25T07:37:56.643Z","updated":"2022-10-30T07:44:33.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9v1yiaq0000lwvp4x5obkux","content":"<h2 id=\"博客主题\"><a href=\"#博客主题\" class=\"headerlink\" title=\"博客主题\"></a>博客主题</h2><p>主要是【常用编程语言基础知识，计算机基础知识，项目设计实践，牛逼的游戏，牛逼的软件，生活经验和感悟】记录。</p>\n<h2 id=\"杂谈\"><a href=\"#杂谈\" class=\"headerlink\" title=\"杂谈\"></a>杂谈</h2><p>老早之前就建好这个站了，不过嫌弃默认样式太丑又不会自定义，所以就没一直用下去</p>\n<p>这次学了一点前端回来捡起来这个站，当作一个安全的备份记录的地方，希望能早点把真真正正自己写的网站弄出来，暂时把这里当作主要阵地。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"博客主题\"><a href=\"#博客主题\" class=\"headerlink\" title=\"博客主题\"></a>博客主题</h2><p>主要是【常用编程语言基础知识，计算机基础知识，项目设计实践，牛逼的游戏，牛逼的软件，生活经验和感悟】记录。</p>\n<h2 id=\"杂谈\"><a href=\"#杂谈\" class=\"headerlink\" title=\"杂谈\"></a>杂谈</h2><p>老早之前就建好这个站了，不过嫌弃默认样式太丑又不会自定义，所以就没一直用下去</p>\n<p>这次学了一点前端回来捡起来这个站，当作一个安全的备份记录的地方，希望能早点把真真正正自己写的网站弄出来，暂时把这里当作主要阵地。</p>\n"},{"title":"JavaScript","date":"2022-10-30T07:29:37.000Z","_content":"\n# JS\n\n## 基础\n\n```\nJS和python都是解释型语言，仅需解释器在每次执行时编译并解释执行，编译型语言如c++，Java编译一次后，产生可执行文件可多次执行，效率高\n\n<!--本地路径/和\\是等效的-->\n<img src=\".\\Image\\20161025\\guo.jpg\" />\n<img src=\"./Image/20161025/guo.jpg\" />\n<img src=\".\\Image/20161025/guo.jpg\" />\n<img src=\"./Image\\20161025\\guo.jpg\" />\n<!--网络文件路径一定要使用正斜杠/-->\n```\n\n诞生于1995，出现时用于处理网页中的**前端验证**，发展中遵循ECMAScript标准，完整的JavaScript由三部分组成：**ECMAScript标准，DOM文档对象模型，BOM浏览器对象模型**\n\n解释型语言，无需编译直接运行，动态语言，基于原型的面向对象，写在script标签中，从上到下逐条执行；标识符命名仅可以含有字母、数字、_、$\n\n## 变量性质、关键字和特性\n\n区分大小写，允许Unicode字母、数字和表意文字(意味着可以用汉字定义变量但不推荐)\n\n当浏览器开辟出供代码执行的栈[内存](https://so.csdn.net/so/search?q=内存&spm=1001.2101.3001.7020)后，代码并没有自上而下立即执行，而是继续做了一些事情：**把当前作用域中所有带var/function关键字的进行提前的声明和定义 => 变量提升机制**\n\ntypeof 操作符\n\n```js\ntypeof 'aaa';//\"string\"\n```\n\n\n\n### `let`和`var`的区别\n\n `let`和`const`不存在变量提升机制；`var`允许重复声明，而`let`不允许重复声明； `let`能解决`typeof`检测时出现的暂时性死区问题（`let`比`var`更严谨）；let创建的全局变量没有给window设置对应的属性；let会产生块级作用域\n\n- `var`声明是全局作用域或函数作用域，而`let`和`const`是块作用域。\n- `var`变量可以在其范围内更新和重新声明； `let`变量可以被更新但不能重新声明； `const`变量既不能更新也不能重新声明。\n- 它们都被提升到其作用域的顶端。但是，虽然使用变量`undefined`初始化了`var`变量，但未初始化`let`和`const`变量。\n- 尽管可以在不初始化的情况下声明`var`和`let`，但是在声明期间必须初始化`const`。\n\n暂时性死区：在块级顶部到变量正式申明这块区域去访问这个变量的话，直接报错\n\n```js\nvar x = 1;\nif(true) {\n  console.log(x);//报错而不是到外部引用x\n  \n  let x = 2;\n}\n```\n\n\n\n### 六种数据类型\n\n`String` `Number` `Boolean`  `Undefined` `Symbol` `Object` \n\n`Object`为引用数据类型  \n\n- Number\n\n  均采用IEEE 754存储数字，会把能转换为整数的小数转换为整数。科学计数法：3.123e7等效于3.123*10^7\n\n  八进制值用0o做前缀，十六进制0x前缀\n\n  浮点值最高精度为1e-17，不宜用js做科学计算\n\n  `NaN`表示`Not a Number`，数据类型也是`Number`，有`Number.MIN_VALUE`=5E-324，`Number.MAX_VALUE`=1.797e308，还有正无穷 Infinity 和负无穷 -Infinity。函数 isFinite()可以判断数值是不是有限\n\n  isNaN()函数可以判断所给参数是否能转换为数值，不能则返回 true\n\n  ```js\n  isNan('10');//返回false，因为能转化为数字\n  \n  num.toFixed(digits)//浮点数规整化，digits为小数点后保留位数\n  \n  Math.trunc() //return the integer portion of a number\n  ```\n\n  即将支持的 BigInt 大数，在number字面量后加上 n 即可。可以表示任意大整数。\n\n- `null`值用来表示一个为空的对象，`typeof null`时返回`object`类型。原则上 null 表示一个空指针\n\n- string：将其他数据类型转换为String类型：`toString`方法和`String`函数，前者不能转换null和undefined类型，后者可以，凡遇字母转换为`NaN`。  转换为Number类型：Number函数，针对字符串有`parseInt`和`parseFloat`，这两个函数遇到其他类型时会先将对象转换为字符串再进行转换。\n\n  toString()方法在用于数值对象时可以接受参数，表示转换为不同进制的数字字符。\n\n  ```js\n  let num = 10; \n  console.log(num.toString()); // \"10\" \n  console.log(num.toString(2)); // \"1010\" \n  console.log(num.toString(8)); // \"12\" \n  console.log(num.toString(10)); // \"10\" \n  console.log(num.toString(16)); // \"a\" \n  ```\n\n  *用加号操作符给一个值加上一个空字符串\"\"也可以将其转换为字符串*\n\n  - ``反引号，不同于单引号''和双引号\"\"，可以包裹模板字符串，能够允许嵌入表达式的字符串字面量，嵌入${expression}即可\n\n  - 标签函数标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。 标签函数本身是一个常规函数，通过前缀到模板字面量来应用自定义行为。\n\n    ```js\n    let a = 6; \n    let b = 9; \n    function simpleTag(strings, ...expressions) { \n        console.log(strings); \n        for(const expression of expressions) { \n            console.log(expression); \n        } \n        return 'foobar'; \n    } \n    let taggedResult = simpleTag`${ a } + ${ b } = ${ a + b }`; \n    // [\"\", \" + \", \" = \", \"\"] 字符串数组\n    // 6 \n    // 9 \n    // 15 \n    console.log(taggedResult); // \"foobar\" \n    \n    ```\n\n  - 用模板字面量也可以直接获取原始的模板字面量内容。在标签函数的第一个参数中，存在一个特殊的属性`raw`，其他地方无法对字符串数组使用。\n\n- Symbol类型：唯一标识符，具有唯一性、隐藏性（用作对象属性名时无法通过object.key访问，而需要定制的object.getOwnPropertySymbols()方法得到对象中所有用作属性名的symbol）\n\n  ```js\n  let id1 = Symbol('id');\n  let id2 = Symbol('id');\n  console.log(id1===id2);//false\n  \n  let id3 = Symbol.for('id');\n  console.log(id1===id3);//false\n  \n  let id4  =Symbol.for('id');\n  console.log(id3===id4)//true\n  ```\n\n  全局注册并登记，使得相同参数注册的值symbol相等。前提是都通过for注册登记。\n\n  \n\n数字0，空字符串，NaN，空指针null，undefined都可以自动转化为false\n\nnull 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 **对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。**因此，**需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。**\n\n## 基础语句\n\n\\=\\=运算符会做强制类型转换\t\\=\\=\\=不会，单引号双引号和python一样，都可以用来包裹字符串，无区别。\n\ntypeof 操作符，返回其后变量或字面量的类型\n\n\\+ 能做数字间的加减运算，当任一对象为字符串时会把另一参加运算对象转化为字符串再进行字符串拼接，参与运算对象为 object 或其他类型时会先转换为字符串再按如上规则运算\n\n- try{}catch{}finally{}\n\n  1.try中有return, 会先将值暂存，无论finally语句中对该值做什么处理，最终返回的都是try语句中的暂存值。\n\n  2.当try与finally语句中均有return语句，会忽略try中return。\n\n### 空值合并运算符\n\n**空值合并操作符**（**`??`**）是一个逻辑操作符，当左侧的操作数为 [`null`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null) 或者 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined) 时，返回其右侧操作数，否则返回左侧操作数。\n\n与[逻辑或操作符（`||`）不同，逻辑或操作符会在左侧操作数为[假值](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)时返回右侧操作数。也就是说，如果使用 `||` 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，`''` 或 `0`）时。\n\n```js\nconst foo = null ?? 'default string';\nconsole.log(foo);\n// expected output: \"default string\"\n\nconst baz = 0 ?? 42;\nconsole.log(baz);\n// expected output: 0\n\nconst baz = 0 || 42;\nconsole.log(baz);\n// expected output: 42\n```\n\n逻辑空赋值 ??=\n\nx ??= y ，x为null或undefined时才赋值为右值。\n\n### 可选链操作符\n\n?.\tTS中遇到过\n\n判断是否为空\n\n\n\n### 解构赋值\n\nES6 \n\n- 数组结构赋值：\n\n  只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n  ```js\n  let [a=1,b=2]=[4,5]\n  \n  \n  ```\n\n  \n\n- 对象解构赋值：\n\n  注意loc: { start }和loc: start是不一样的，前者把start也作为模式串，而后者只有loc是模式串\n\n  ```js\n    const node = {\n      loc: {\n        start: {\n          line: 1,\n          column: 5\n        }\n      }\n    };\n    let { loc, loc: { start }, loc: { start: { line }} } = node;\n    line // 1\n    loc  // Object {start: Object}\n    start // Object {line: 1, column: 5}\n  ```\n\n  默认值，生效的条件是，对象的属性值严格等于`undefined`。\n\n  ```js\n  var {x = 3} = {x: undefined};\n  x // 3var \n  \n  {x = 3} = {x: null};\n  x // null\n  ```\n\n  由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n  ```js\n  let arr = [1, 2, 3];\n  let {0 : first, [arr.length - 1] : last} = arr;//index\n  first // 1\n  last // 3\n  ```\n\n\n\n\n\n\n\n## 常用方法\n\n### forEach\n\n```\n// 箭头函数\nforEach(() => { /* … */ } )\nforEach((value) => { /* … */ } )\nforEach((value, key) => { /* … */ } )\nforEach((value, key, map) => { /* … */ } )\n\n// 回调函数\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n\n// 内联回调函数\nforEach(function() { /* … */ })\nforEach(function(value) { /* … */ })\nforEach(function(value, key) { /* … */ })\nforEach(function(value, key, map) { /* … */ })\nforEach(function(value, key, map) { /* … */ }, thisArg)\n```\n\n\n\n\n\n## Map和Set\n\n- 一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。\n- Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。\n\nSet 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。重复值的元素会被略去。\n\n```\nSet.prototype.add(value)\n在Set对象尾部添加一个元素。返回该 Set 对象\n\nSet.prototype.delete(value)\n移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。\n\nSet.prototype.has(value)\n返回一个布尔值，表示该值在 Set 中存在与否。\n\nSet.prototype.clear()\n移除Set对象内的所有元素。\n\nSet.prototype.forEach(callbackFn[, thisArg])\n按照插入顺序，为 Set 对象中的每一个值调用一次 callBackFn。如果提供了thisArg参数，回调中的 this 会是这个参数。\n\nSet.prototype.values()\n返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。\n```\n\nlet newArray = Array.from(set)，可以把括号内的对象转换为array并返回\n\n\n\n```\nMap.prototype.size\n返回 Map 对象中的键值对数量。\n\nMap.prototype.get(key)\n返回与 key 关联的值，若不存在关联的值，则返回 undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，用来表明 Map 对象中是否存在与 key 关联的值。\n\nMap.prototype.set(key, value)\n在 Map 对象中设置与指定的键 key 关联的值 value，并返回 Map 对象。\n\nMap.prototype.delete(key)\n移除 Map 对象中指定的键值对，如果键值对存在并成功被移除，返回 true，否则返回 false。调用 delete 后再调用 Map.prototype.has(key) 将返回 false。\n```\n\n### WeakMap\n\n**`WeakMap`** 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。\n\nmap API *可以* 通过使其四个 API 方法共用两个数组（一个存放键，一个存放值）来实现。给这种 map 设置值时会同时将键和值添加到这两个数组的末尾。从而使得键和值的索引在两个数组中相对应。当从该 map 取值的时候，需要遍历所有的键，然后使用索引从存储值的数组中检索出相应的值。\n\n但是存在两个缺点：\n\n1. 首先赋值和搜索操作都是 *O(\\*n*)* 的时间复杂度（*n* 是键值对的个数），因为这两个操作都需要遍历全部整个数组来进行匹配。\n2. 另外一个缺点是可能会导致内存泄漏，因为数组会一直引用着每个键和值。这种引用使得垃圾回收算法不能回收处理他们，即使没有其他任何引用存在了。\n\n相比之下，原生的 `WeakMap` 持有的是每个键对象的“弱引用”，这意味着在没有其他引用存在时垃圾回收能正确进行。原生 `WeakMap` 的结构是特殊且有效的，其用于映射的 key _只有_在其没有被回收时才是有效的。\n\n**正由于这样的弱引用，`WeakMap` 的 key 是不可枚举的**（没有方法能给出所有的 key）。如果 key 是可枚举的话，其列表将会受垃圾回收机制的影响，从而得到不确定的结果。因此，如果你想要这种类型对象的 key 值的列表，你应该使用 [`Map`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)。\n\n- [`WeakMap.prototype.delete(key)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n\n  删除 WeakMap 中与 `key` 相关联的值。删除之后， `WeakMap.prototype.has(key)` 将会返回 `false`。\n\n- [`WeakMap.prototype.get(key)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n\n  返回 WeakMap 中与 `key` 相关联的值，如果 `key` 不存在则返回 `undefined`。\n\n- [`WeakMap.prototype.has(key)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)\n\n  返回一个布尔值，断言一个值是否已经与 `WeakMap` 对象中的 `key` 关联。\n\n- [`WeakMap.prototype.set(key, value)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n\n  给 `WeakMap` 中的 `key` 设置一个 `value`。该方法返回一个 `WeakMap` 对象。\n\n## 数组\n\n\n\n```\npop()删除末尾元素 ，返回移除的数组元素；\npush(ele)末尾添加元素 ele，返回添加后数组的长度；\nshift()删除首元素并移动数组位置 ，返回添加后数组的长度；\nunshift(ele)在数组首位置添加元素ele，返回添加后数组的长度；\n\nshift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。\n\nunshift方法\nunshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度（该方法修改原有数组）\narr.unshift(element1, ..., elementN)\n返回其 length 属性值\n\nArray.isArray(val):判断val是不是数组\n\nArray.prototype 属性表示 Array 构造函数的原型，并允许向所有Array对象添加新的属性和方法。或者说，允许利用prototype向任何对象添加属性和方法，从而应用到对象的所有实例上\n```\n\n### 遍历操作\n\n最常用for (var i = 0; i < a.length; i++) {\n    // Do something with a[i]\n}\n\nfor (. of array)：for (const currentValue of a)  {// Do something with currentValue}\n\nfor(. in array)：for (var i in a) {// 操作 a[i]}遍历索引，如果直接向 Array.prototype 添加了新的属性，使用这样的循环这些属性也同样会被遍历。不推荐这个循环\n\nforEach()：\narray.forEach(function(currentValue, index, array) {// 操作 currentValue 或者 array[index]});\n\n注: forEach() 对于空数组是不会执行回调函数的。\n\n### [Array.prototype.at()](https://link.segmentfault.com/?enc=gIfegOUoZxxLBOg%2FnmpAvw%3D%3D.it%2BTiWVsG0Y95ewedhlKoMS2CPXZSbhECA0MBePgVHbbS3pnn4r95vxFQo8Wnk%2BrFcIZQbnMXjwFeEBW9uTMx%2FmnhkJ0ck8W%2FV9MIZGB4SZb5GqmV1RLVPtXvNkMw7kq)\n\n- 返回at中参数指向的index的数组元素，支持负数\n\n### array.prototype.concat()\n\n拼接两个数组\n\n```js\nconcat()\nconcat(value0)\nconcat(value0, value1)\nconcat(value0, value1, /* … ,*/ valueN)\n```\n\n`valueN` 可选\n\n数组和/或值，将被合并到一个新的数组中。如果省略了所有 `valueN` 参数，则 `concat` 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。\n\n\n\n###  array.indexOf\n\n- 判断数组中是否存在某个值，如果存在返回数组元素的下标，否则返回-1\n\n### array.includes(searchElement[, fromIndex])\n\n- 判断一个数组是否包含一个指定的值，如果存在返回 true，否则返回false。\n\n### reduce()方法 \n\n**`reduce()`** 方法对数组中的每个元素按序执行一个由您提供的 **reducer** 函数，每一次运行 **reducer** 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n\n```js\narray.reduce(\n\tfunction(\n\t\ttotal,\n\t\tcurrentValue,\n\t\t[currentIndex,\n\t\t[arr]]),\n\t[initialValue])\n```\n\nreduce() 方法接收一个回调函数作为参数，reduce 为数组中的每一个元素依次执行回调函数，回调函数接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。\nreduce方法的返回值为回调函数最后的返回值。\n\n如果没有提供initialValue，那么reduce的第一轮回调函数中的“total”就arr[0]，“current_Value”就是arr[1]，index就是1；\n\n如果提供initialValue，那么reduce的第一轮回调函数中的“total”就是initialValue，“current_Value”就是arr[0]，index就是0。\n\n所以在使用reduce函数时，回调函数中return最好不要省，而且initialValue也最好不要省！！！\n\n### filter() 方法\n\n返回一个新数组，其包含通过所提供函数实现的测试的所有元素。 \n\nvar newArray = arr.filter(callback(element[, index[, array]])[, thisArg])\n\n上式中 element 必需，后三者都可选，但没传 index 则 array 也不能传\n\n注：当所过滤的数组是对象数组的情况时，对新返回的数组元素属性做出修改，同时对原数组也会造成影响；当过滤数组为纯数组时，修改不会改变原数组。也就是浅拷贝\n\n### from方法\n\nArray.from(arrayLike[, mapFn[, thisArg]])参数分别为伪数组对象或可迭代对象，新数组中的每个元素会执行的回调函数，执行回调函数 mapFn 时 this 对象\n返回一个新的数组实例。\n\nArray.from(arrayLike[, mapFunction[, thisArg]])：arrayLike：必传参数，想要转换成数组的伪数组对象或可迭代对象。\nmapFunction：可选参数，mapFunction(item，index){...} 是在集合中的每个项目上调用的函数。返回的值将插入到新集合中。\nthisArg：可选参数，执行回调函数 mapFunction 时 this 对象。这个参数很少使用。\n\n### array.map() 方法\n\n返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值，按照原始数组元素顺序依次处理元素。\narray_back=array.map(function(currentValue,index,arr), thisValue)\n\n注：map()方法不会对空数组进行检测；也不会改变原数组\n\neg.\tlet arr = new Array( 2 ).fill( 0 ).map( _ => new Array( 3 ) ); //作用类似C语言：int arr[2][3]\n\n### arr.slice([begin[, end]])\n\n- `begin` 可选，可为负。如果 `begin` 大于[数组](https://so.csdn.net/so/search?q=数组&spm=1001.2101.3001.7020)长度，返回空数组。slice(-1) 提取最后一个元素，slice(-2)提取最后两个元素，依次类推。前包后不包。\n  [slice](https://so.csdn.net/so/search?q=slice&spm=1001.2101.3001.7020)() 返回整个数组。\n\n### array.splice(start[, deleteCount[, item1[, item2[, ...]]]])\n\n- start 指定修改的开始位置（从 0 计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从 -1 计数，这意味着 -n 是倒数第 n 个元素并且等价于 `array.length-n`）；如果负数的绝对值大于数组的长度，则表示开始位置为第 0 位。\n- deleteCount :整数，表示要移除的数组元素的个数。如果 `deleteCount` 大于 `start` 之后的元素的总数，则从 `start` 后面的元素都将被删除（含第 `start` 位）。如果 `deleteCount` 被省略了，或者它的值大于等于`array.length - start`(也就是说，如果它大于或者等于`start`之后的所有元素的数量)，那么`start`之后数组的所有元素都会被删除。如果 `deleteCount` 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。\n- item:从start位置要添加进数组的元素，不指定时 splice 将只删除元素。\n\n返回被删除的元素\n\n### arr.sort([compareFn])\n\n如果没有指明 `compareFn` ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 \"Banana\" 会被排列到 \"cherry\" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 `compareFn`），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 \"80\" 要比 \"9\" 要靠前。\n\n- 如果 `compareFn(a, b)` 大于 0 ， b 会被排列到 a 之前。\n- 如果 `compareFn(a, b)` 小于 0 ，那么 a 会被排列到 b 之前；\n- 如果 `compareFn(a, b)` 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n- `compareFn(a, b)` 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n\n\n\n### strArr.join(separator)\n\n- 用输入参数分隔输入字符串数组的每个元素，返回新字符串\n\n## 字符串\n\n可以直接用比较符号比较字符串\n\n### 编码\n\nescape-unescape方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。\n\nencodeURI-decodeURI对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的： , / ? : @ & = + $ # \n\nencodeURIComponent-decodeURIComponent该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。其他字符（比如 ：;/?:@&=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。\n\n**1、如果只是[编码字符串](https://www.zhihu.com/search?q=编码字符串&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={\"sourceType\"%3A\"answer\"%2C\"sourceId\"%3A20300871})，不和URL有半毛钱关系，那么用escape。**\n\n**2、如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。**\n\n比如\n\n```js\nencodeURI(\"http://www.cnblogs.com/season-huang/some other thing\");\n```\n\n编码后会变为\n\n```js\n\"http://www.cnblogs.com/season-huang/some%20other%20thing\";\n```\n\n其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为\n\n```js\n\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"\n```\n\n看到了区别吗，连 \"/\" 都被编码了，整个URL已经没法用了。\n\n**3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。**\n\n### String.prototype.charAt(index)\n\n指定 `index` 处字符，参数不在 0 和字符串的 length-1 之间，则返回空字符串\n\n### String.prototype.charCodeAt(index)\n\nindex：一个大于等于 `0`，小于字符串长度的整数。如果不是一个数值，则默认为 `0`。\n\n返回值：指定 `index` 处字符的 UTF-16 代码单元值的一个数字；如果 `index` 超出范围，`charCodeAt()` 返回 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)。\n\n如果指定的 `index` 小于 `0` 、等于或大于字符串的长度，则 `charCodeAt` 返回 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)。\n\n### String.fromCharCode()\n\n静态 **`String.fromCharCode()`** 方法返回由指定的 UTF-16 代码单元序列创建的字符串。\n\n```js\nString.fromCharCode(str[i].charCodeAt()+1); \n```\n\n### indexOf() 和 lastIndexOf()\n\n使用字符串的 indexOf() 和 lastIndexOf() 方法，可以根据参数字符串，返回指定子字符串的下标位置。这两个方法都有两个参数，说明如下。\n\n- 第一个参数为一个子字符串，指定要查找的目标。\n- 第二个参数为一个整数，指定查找的起始位置，取值范围是 0~length-1。\n\n对于第二个参数来说，需要注意一下几个特殊情况。\n\n- 如果值为负数，则视为 0，相当于从第一个字符开始查找。\n- 如果省略了这个参数，也将从字符串的第一个字符开始查找。\n- 如果值大于等于 length 属性值，则视为当前字符串中没有指定的子字符串，返回 -1。\n\n### str.match(reg)\n\n/./g\n\n方法对字符串对象进行检索,返回包含所有匹配结果的数组。而 正则表达式 /./g 匹配的是所有的字符， 所以str.match(/./g)返回的是由字符串str中所有的字符组成的数组，以此达到将字符串转换为数组的目的。 \n\n### str.replace(pattern, replacement)\n\n两个参数均为字符串，寻找到模式串替换为后者。\n\n### str.search(regexp)\n\n返回 str 中给定正则表达式对应索引\n\n### str.slice(a,b)\n\n前包后不包；截取出来的字符串的长度为第二个参数与第一个参数之间的差；若参数值为负数,则将该值加上字符串长度后转为正值；若第一个参数等于大于第二个参数,则返回空字符串.\n\n### str.substring(a,b)\n\n前包后不包；若参数值为负数,则将该值转为0;两个参数中,取较小值作为开始位置,截取出来的字符串的长度为较大值与较小值之间的差.\n\n### str.split(separator)\n\n分割字符串，返回字符数组\n\n### str.substr(a,length)\n\n第一个参数代表开始位置,第二个参数代表截取的长度\n\n\n\n\n\n## 函数\n\n### 基础\n\n```javascript\nvar avg = function(){}<=>function avg(){}\n//js创建函数有两种：一是函数声明function fnName () {…};，二是函数表达式var fnName = function () {…};前者因 js 具有 函数声明提升 所以定义在任何位置均可成功调用，而后者必须等到定义语句被解释后才能正常调用(与 var 的变量定义提升不同)\n//还有一种匿名函数：function () {…}; 使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数，匿名函数属于函数表达式，匿名函数有很多作用，赋予一个变量则创建函数，赋予一个事件则成为事件处理程序或创建闭包等等。\n函数表达式后面可以加括号立即调用该函数，*函数声明不可以，只能以fnName()形式调用* 存疑，在控制台中调用成功。是因为在函数定义前面加了运算符，比如用括号包裹，把它也转换为了表达式。\n总结一下就是当把函数定义为表达式时总能在后面加上括号来立即调用。\n(function() {})()  (function a() {})()  var a=function() {}()  三者均能立即调用。\n```\n\n由 `Function` 构造函数创建的函数不会创建当前环境的闭包，它们总是被创建于全局环境，因此在运行时它们只能访问全局变量和自己的局部变量，不能访问它们被 `Function` 构造函数创建时所在的作用域的变量。这一点与使用 [`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval) 执行创建函数的代码不同。\n\n```js\nlet a = 1\nfunction foo() {\n    console.log(a)\n}\nfunction too() {\n    let a = 2\n    foo()\n}\ntoo() // 1, not 2\n```\n\n```python\nlambda x: x * 8\nlet ans=x => x*8;\n```\n\njs的=>符号类似于lambda\n\n```\n=>是es6中的arrow function语法\n(x) => x + 6\n相当于\nfunction(x){return x + 6;};\n\nconst funcname=(args)=>{...}\t\t函数调用：funcname(args)\n```\n\neval()函数，参数是一个字符串。如果字符串表示的是表达式，`eval()` 会对表达式进行求值。如果参数表示一个或多个 JavaScript 语句，那么`eval()` 就会执行这些语句。如果 `eval()` 的参数不是字符串， `eval()` 会将参数原封不动地返回。\n\n永远不要使用eval()\n\n\n\n\n\n\n\n### 回调\n\n嵌套函数可以访问父函数作用域中的变量，可以利用这个特性减少全局变量的数量，有效地防止“污染”你的全局命名空间——你可以称它为“局部全局（local global）”。换种思路，把全局当作整体函数，那么就能形成作用域链(scope chain)，嵌套者能访问被嵌套者的变量，反之则不行，寻找变量的定义时总是从当前嵌套层或者说从金字塔的当前区域往外(往下)寻找，就近选择。需要注意的是每个函数的金字塔是不同的，在该函数被定义的时候就已经确定了，所以当在函数内部调用之前已定义的函数时，应当回到那个函数的“金字塔”寻找其所需要的变量，当前函数的作用域不会与产生交集。\n\n头等函数(first-class functions)，可以当作参数被传递的函数。回调函数(callback)是被作为参数传递的函数，注意是函数作为参数，而非函数返回值作为参数，与其对应的是高阶函数，是使用回调函数的函数。\n\n回调机制包括三方：起始函数，中间函数，回调函数；起始函数调用中间函数，把回调函数作为参数传递给中间函数。起始函数一般是当前运行的主函数，一般隐藏忽略，主要关注回调函数和把回调函数作为参数的中间函数。\n\n回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。\n\n\n\n### call、apply和bind\n\n`myfunc(...args)<=>myfunc.apply(null,args)`展开语法将数组展开为数组元素。**剩余参数**语法允许我们将一个不定数量的参数表示为一个数组，与展开语法恰恰相反，形式为定义函数时`function fun1(...theArgs){alert(theArgs.length);}`。剩余参数也可以被解构为包含变量，形式为`function f(...[a, b, c]) {return a + b + c;}`. \n\n`apply()` 的第一个参数应该是一个被当作 `this` 来看待的对象。于是这里是全局对象。\n\n\n\n`apply()` 有一个姐妹函数，名叫 [`call`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)，它也可以允许你设置 `this`，但它带有一个扩展的参数列表而不是一个数组。\n\n```js\nfunction.call(thisArg, arg1, arg2, ...)\n```\n\nthisArg是函数执行时的 this 对象。call 实现\n\n```js\nFunction.prototype.myCall = function (context,...args) {\n    // 判断调用对象\n    if (typeof this !== \"function\") {\n    \tthrow new Error(\"Type error\");\n    }\n    let result = null;\n    // 判断 context 是否传入，如果没有传就设置为 window\n    context = context || window;\n\targs = args ? args : []\n\tconst key = Symbol();\n    context[key] = this;\n\t//通过隐式绑定的方式调用函数\n    result = context[key](...args);\n    // 删除手动增加的属性方法\n    delete context[key];\n    // 将执行结果返回\n    return result;\n};\n```\n\n类似的apply实现\n\n```js\nFunction.prototype.myApply=function(context,args){\n\tif (typeof this !== \"function\") {\n    \tthrow new Error(\"Type error\");\n    }\n    args = args ? args : [];\n    const key = Symbol();\n    context[key]=this;\n    const result = context[key](...args);\n    delete context[key];\n    return result;\n}\n```\n\n\n\nbind先返回一个绑定了this的函数，再次执行则在this中执行\n\n```\nvar a ={\n\tname : \"Cherry\",\n\tfn : function (a,b) {\n\t\tconsole.log( a + b)\n\t}\n}\n\nvar b = a.fn;\nb.bind(a,1,2)()           // 3\n```\n\nbind利用apply实现\n\n```js\nFunction.prototype.myBind = function (context, ...args) {\n    const fn = this\n    args = args ? args : []\n    return function newFn(...newFnArgs) {\n        if (this instanceof newFn) {\n            return new fn(...args, ...newFnArgs)\n        }\n        return fn.apply(context, [...args,...newFnArgs])\n    }\n}\n```\n\n\n\n\n\n### 函数柯里化\n\n将接受 **n 个参数的 1 个函数改为只接受一个参数的 n 个互相嵌套的函数**，当前置部分参数一致时，可以通过固定前置参数生成指定函数，简化代码。\n\n对应偏函数是柯里化的宽松情况，不一定需要每一层都只固定一个参数，继承思想即可。\n\n\n\n### 函数参数的传递\n\n有值传递和引用传递，基本类型传递值，引用类型(对象)传递对象的地址，如果在函数中对对象重新赋值，则传递进来的地址改变，即在堆中重新分配一段空间，改变传递进来地址的值指向这个新的地址，不影响原对象。\n\n```\nfunction changeAgeAndReference(person) {\n    person.age = 25;\n    person = {\n        name: \"John\",\n        age: 50\n    };\n\n    return person;\n}\nvar personObj1 = {\n    name: \"Alex\",\n    age: 30\n};\nvar personObj2 = changeAgeAndReference(personObj1);\nconsole.log(personObj1); // -> {name: 'Alex', age: 25}\nconsole.log(personObj2); // -> {name: 'John', age: 50}\n```\n\n对对象的重新赋值在任何地方都是如此：在动态堆中重新分配内存空间并赋值，再把原地址的值改为新对象的地址。\n\n当一个对象没有对应地址指向时，也就是上一段中原对象的情况，这个对象的内存地址会被回收，这是js的垃圾回收机制\n\n\"如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。这就要求实时查看内存占用。\"避免内存泄漏的要点在于往后不会使用的变量要及时赋空。\n\n\n\n\n\n## 闭包、词法环境(作用域)\n\n一个函数和对其周围状态（**lexical environment，词法环境**）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是**闭包**（**closure**）。\n\n- 用于保存私有属性：将不需要对外暴露的属性、函数保存在闭包函数的父函数里，避免外部操作对值的干扰\n- 避免局部属性污染全局变量空间导致的命名空间混乱\n- 模块化封装，将对立的功能模块通过闭包进去封装，只暴露较少的 API 供外部应用使用\n\n缺点：内存消耗，由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。\n\nc语言退出函数时局部变量也会退出其作用域，所以难以创建闭包；js创建函数时会保留其能访问的变量的地址，这也是创建闭包的前提所在。\n\n\n\n词法环境有两大成员：**「Environment Record（环境记录）」**，可能为 null 的 **「Outer Lexical Environment（外部词法环境引用）」**。**任何在环境记录中的标识符都可以在当前词法环境直接以标识符形式访问**。\n\nEnvironment Record 是一个抽象类，存在三个具体的子类，**「Declarative Environment Record」** ，**「Object Environment Record」**，**「Global Environment Record（全局环境记录）」**\n\n声明式环境记录保存 let、const、function 等非 var 声明标识符，对象式环境记录保存 var 声明标识符。 \n\n### 对象式环境记录\n\n对象式记录也是用于记录标识符与变量的映射，但是它只记录var声明的标识符 ； 并且它有一个关联的绑定对象(binding object)。\n\n- 在词法环境中，会为对象式环境记录中所有的标识符绑定到绑定对象的同名属性上。\n  例如var number=1000; , 也能够通过window.number形式获取到number的值。\n- 反过来也可以，会将绑定对象的所有属性名（自然也必须是能做标识符的）绑定到对象式环境记录中的同名标识符上。\n  例如：window.thousand = 1000; 然后直接以 thousand就能获取到该值（严格模式下报错）\n\n- 每个标识符在绑定后都会直接实例化并初始化为undefined ，如果标识符已经绑定了绑定对象上的原有属性上，那么该变量就是对应属性值 。\n  比如之前的isNaN在声明前使用时就有值，就是这个原因。\n  变量提升也是这个原因造成的。\n- 如果标识符已经存在，那么无视之，所以var可以重复声明。\n\n### 声明式环境记录\n\n同样的，声明式环境记录也比较特殊，它只记录非var声明的标识符，例如let、const、function……声明的标识符等等。并且它没有关联的绑定对象。\n\n- 所有声明的标识符（这里应该包含var声明的标识符，但不建立关联）都位于此处。\n\n- 将所有非var声明的标识符实例化，但不初始化，也就是变量处于uninitialized状态。也就是说内存中已经为变量预留出空间，但是还没有和对应的标识符建立绑定关系。\n- 在执行上下文的运行（perform状态）阶段，并执行到声明语句时，才会真正初始化并默认赋值为undefined。\n  所以你就懂了，let声明的标识符之前无法访问，就是因为还没有建立绑定。\n  暂存死区的根本原因在此。\n\n- 在声明式环境记录中，**不允许出现重复的标识符**，所以它无法重复。甚至和var声明的标识符冲突。注意，它会在代码加载后的预编译阶段（只能说是运行前，因为JS没有真正的预编译啊……）就已经完成。\n\n全局环境记录包含前两者，是底层记录形式，绑定对象为 window 。\n\n```js\nfunction f(a,b){\n    var t = 10;\n    let sum = 10;\n    {\n        let sum = a+b;\n        var mul = a*b +sum;\n    }\n    return  mul*t;\n}\nf(20,30) // 6500\n\n\n//词法环境\nFunctionEnv = {\n    This:<window>\n    outerEnv:<GlobalEnv>,\n    ObjRec:{\n        t:<10>,\n        mul:<650>\n    },\n    DecRec:{\n        sum:<10>\n    }\n}\n\nBlockEnv={\n    This:<window>,\n    outerEnv:<FunctionEnv>,\n    DecRec:{\n        sum:<50>\n    }\n}\n\n```\n\n函数属于声明式环境记录是因为存在块级作用域，var 剥离出的环境记录只有全局作用域和函数作用域。\n\n声明式对应 LexEnv，对象式对应 VarEnv\n\n## 面向对象\n\nthis和new\n\n```\nthis 使用在函数中时被用来指向当前调用函数的对象，也即在对象上使用. or [] 访问属性或者方法时，this就相当于这个对象，如果没有. or []依附对象进行直接访问时，this将指向全局对象（global object），也即访问全局属性/变量或者方法/函数。\nGlobal execution context in scripts:this指全局对象-一个名字叫global的对象\nGlobal execution context in modules：this返回undefined\n\n\nnew 创建一个崭新的空对象，然后使用指向那个对象的 this 调用特定的函数，修改this对象的属性。如果你没有使用 new 运算符，构造函数会像其他的常规函数一样被调用，并不会创建一个对象。在这种情况下，this 的指向也是不一样的。\n```\n\nfor ... in object 可以遍历对象的所有属性，利用全局对象Object的方法keys可以获得属性名数组，例如有对象实例student，Object.keys(student)为student的所有属性名数组。判断对象是否包含某一属性可以用 in ，'keyName' in objectName 是bool值。当通过类实例化时，虽然方法可以访问，in也报true，但方法不属于对象本身，而是属于类。\n\nconst objectName={}，引用关系不可变，但引用内容可变，意思是仍然可以为对象分配属性。\n\n类也是对象。js引擎会自动把常量包装成对象，以能使用对应的对象方法。如length等。\n\n\n\nES6中在对象中添加方法时可以不写key而是直接像下面这样\n\n```\nobjectName{\n...\n\tfuncName(args...){\n\t...\n\t}\n...\n};\n\nsame as\n\nobjectName{\n...\n\tfuncName:function(args...){\n\t...\n\t}\n...\n};\n\nλ-calculus\n```\n\n\n\n以下写法在ES6中合法\n\n```\nlet obj={\n\tname:\"hh\",\n\tage:\"13\"\n}\n\nlet {name,age}=obj;\n```\n\n\n\n`Object.defineProperty(object, property, methods)`\t\n\n第一个参数是一个对象，第二个参数是给该对象设置的属性名称，第三个参数是配置该属性的方法，比如set/get方法\n\n在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n## 防抖节流\n\n防抖：多次连续触发只执行一次\n\n节流：一段时间内连续触发只执行一次，冷却时间过了可以继续\n\n```vue\n<template>\n    <div id=\"content\" \n         style=\"height:150px;\n                line-height:150px;\n                text-align:center; \n                color: #fff;background-color:black;\n                font-size:80px;\">\n    </div>\n</template>\n\n \n<script>\n    let num = 1;\n    const content = document.getElementById('content');\n    function count() {\n        content.innerHTML = num++;\n    };\n    content.onmousemove = count;\n\t//防抖 非立即执行版\n\tfunction debunce(func,wait,...args){\n        let timeout;\n        return function(){\n            const context = this;\n            if(timeout) clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                func.apply(context,args);\n            },wait);\n        }\n    }\n    //防抖 立即执行\n    function debunce(func,wait,...args){\n        let timeout;\n        return function(){\n            const context = this;\n            let callNow = !timeout;\n            if(timeout) clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                timeout = null;\n            },wait)\n            if(callNow) func.apply(context,args);\n        }\n    }\n    \n    //节流 时间戳立即执行\n    function throttle(func,wait,...args){\n        let pre=0;\n        return function(){\n            const context = this;\n            let now = Date.now();\n            if(now-pre>=wait){\n                func.apply(context,args);\n                pre=Date.now();\n            }\n        }\n    }\n    //节流 延时器延迟执行\n    function throttle(func,wait,...args){\n        let timeout=0;\n        return function(){\n            const context = this;\n            if(!timeout){\n                timeout=setTimeout(()=>{\n                    timeout=null;\n                    func.apply(context,args);\n                },wait);\n            }\n        }\n    }\n</script>\n```\n\n\n\n## 异步和同步\n\n异步任务分为宏任务和微任务\n\n**宏任务：**script/外层同步代码，定时器`setTimeout`，`setInterval`，node中的setImmediate，`事件绑定`，`回调函数`，`node中的fs模块`\n\n**微任务：**`new Promise().then(回调)`，`process.nextTick()`，`async await`,`Object.observe`,`MutaionObserver`\n\nEvent Loop的执行顺序是：\n\n1. 首先执行执行栈里的任务。\n2. 执行栈清空后，检查微任务（microtask）队列，将可执行的微任务全部执行。\n3. 取宏任务（macrotask）队列中的第一项执行。\n4. 回到第二步。\n\nawait后面的函数会先执行一遍，然后就会跳出整个async函数来执行后面js栈（后面会详述）的代码。等本轮事件循环执行完了之后又会跳回到async函数中等待await后面表达式的返回值。\n\n```\nconsole.log(\"script start\");\n\nasync function async1() {\n  await async2();\n  console.log(\"async1 end\");\n}\n\nasync function async2() {\n  console.log(\"async2 end\");\n}\n\nasync1();\n\nsetTimeout(function () {\n  console.log(\"setTimeout\");\n}, 0);\n\nnew Promise((resolve) => {\n  console.log(\"Promise\");\n  resolve();\n})\n  .then(function () {\n    console.log(\"promise1\");\n  })\n  .then(function () {\n    console.log(\"promise2\");\n  });\n\nconsole.log(\"script end\");\n// script start => async2 end => Promise => script end => async1 end=> promise1 => promise2 => setTimeout\n```\n\nPromise\n\n第一段调用了Promise构造函数，第二段是调用了promise实例的.then方法。promise的构造函数是同步执行，promise.then中的函数是异步执行。\n\npromise实例有三种状态：\n\n- pending（待定）\n- fulfilled（已执行）/或者也可形象地叫做resolved\n- rejected（已拒绝）\n\n调用resolve和reject能将分别将promise实例的状态变成fulfilled和rejected，只有状态变成已完成（即fulfilled和rejected之一），才能触发状态的回调\n\n```\nlet p = new Promise((resolve, reject) => {\n  // 做一些事情\n  // 然后在某些条件下resolve，或者reject\n  if (/* 条件随便写^_^ */) {\n    resolve()\n  } else {\n    reject()\n  }\n})\n\np.then(() => {\n    // 如果p的状态被resolve了，就进入这里\n}, () => {\n    // 如果p的状态被reject\n})\n```\n\n\n\n- 多个 then() 链式调用，**并不是连续的创建了多个微任务并推入微任务队列**，因为 then() 的返回值必然是一个 Promise，而后续的 then() 是上一步 then() 返回的 Promise 的回调\n\n- 按照规范\n\n  ```arcade\n  async function async1(){\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n  }\n  ```\n\n  可以转化为：\n\n  ```arcade\n  function async1(){\n    console.log('async1 start')\n    return RESOLVE(async2())\n        .then(() => { console.log('async1 end') });\n  }\n  ```\n\n- `RESOLVE(p)`接近于`Promise.resolve(p)`，不过有微妙而重要的区别：p 如果本身已经是 Promise 实例，Promise.resolve 会直接返回 p 而不是产生一个新 promise；\n\n- 如果`RESOLVE(p)`严格按照标准，应该产生一个新的 promise，尽管该 promise 确定会 resolve 为 p，**但这个过程本身是异步的**，也就是现在进入 job 队列的是**新 promise 的 resolve 过程**，所以该 promise 的 then 不会被立即调用，而要等到当前 job 队列执行到前述 resolve 过程才会被调用，然后其回调（也就是继续 await 之后的语句）才加入 job 队列，所以时序上就晚了\n\n- 所以上述的 async1 函数我们可以进一步转换一下：\n\n  ```arcade\n  function async1(){\n    console.log('async1 start')\n    return new Promise(resolve => resolve(async2()))\n      .then(() => {\n        console.log('async1 end')\n      });\n  }\n  ```\n\n## JSON\n\nJSON对象有两个方法。JSON支持三种类型值：简单值（不包括 undefined ，字符串、数字、null，布尔值均可），对象，数组。也没有分号\n\nJSON.stringify()\n\nJSON.parse()\n\n\n\n## 网络请求和远程资源\n\nAjax\n\nasynchronous JavaScript and XML\n\n### XMLHttpRequest对象-XHR\n\nXHR对象类型\n\n```json\n{\n    //XMR方法\n\topen:function(method,url,isAsync),//必须首先使用的方法\n\tsetRequestHeader:function(HeaderKey:string,HeaderValue:any)//自定义发送头部的信息，必须在open之后，send之前调用此函数。需要区别于浏览器正常发送头部，因为部分浏览器允许重写默认头部，某些则会引起错误\n\tsend:function(arg),//参数为请求体数据，不存在请求体时参数需显示设置为 null\n\n\t//readyState变化时自动调用此函数\n\tonreadystatechange:function(),\n\n\t//获取响应头部信息\n\tgetResponseHeaders:function(headerKey:string),\n\tgetAllResponseHeaders():function(),\n\t\n\t//send 方法执行得到返回内容之后，这些属性会被填充\n\tresponseType:\"\",\n\tresponseText:\"string\",//响应体文本\n\tresponseXML:XML DOM,//响应类型为 text/xml 或者 application/xml 时返回的包含响应式数据的 XML DOM 文档\n\tstatus:statusCode,//响应HTTP状态码 2xx表示成功，304表示资源未修改，直接从浏览器缓存读取，此两种情况都表示响应有效\n\tstatusText:'description',//HTTP状态描述信息\n\n\n\t//状态属性\n\treadyState:0|1|2|3|4,//五种状态，0表示未调用 open 方法，未初始化，1表示已 open 但未 send，2表示 sent 但未收到响应，3表示收到部分响应 receiving ，4表示完成，已收到所有响应 complete。\n\n\t//收到响应之前可调用此方法终止异步请求，同时应当取消对该XHR对象的引用\n\tabort:function(),\n\t\n}\n```\n\n\n\n```js\n//创建XHR对象\nlet xhr = new XMLHttpRequest();\n\n//使用XMR对象\n//首先必须使用open方法，三个参数依次是\t请求类型：string，请求URL：string，是否异步：Boolean；这里的URL是相对于代码所在的页面的，必须遵守同源策略（同一域名，同一端口，同一协议），否则抛出安全错误。\nxhr.open('get','example.com',false);\nxhr.setRequestHeader('myHaeder','myValue');\nxhr.send(null);\n```\n\nsend时XHR默认会发送的头部字段：\n\n- Accept 浏览器可以处理的内容类型\n- Accept-Charset 浏览器支持显示的字符集\n- Accept-Encoding 浏览器可以处理的压缩编码类型\n- Accept-Language 浏览器使用的语言\n- Connection 浏览器与服务器的连接类型\n- Cookie 页面中设置的Cookie\n- Host 发送请求的页面所在的域\n- Referer 发送请求的页面的 URL ，将错就错，正确拼法是 referre\n- User-Agent 浏览器的用户代理字符串 \n\n#### Get请求\n\nThe `encodeURIComponent()` method **encodes** a URI component. Use the [decodeURIComponent()](https://www.w3schools.com/jsref/jsref_decodeuricomponent.asp) function to **decode** an encoded URI component.\n\n#### Post请求\n\n\n\n### CORS\n\n跨域资源共享 Cross-origin Resource Share使用场景：\n\n- 由 [`XMLHttpRequest`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 或 [Fetch APIs](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API) 发起的跨源 HTTP 请求。\n- Web 字体 (CSS 中通过 `@font-face` 使用跨源字体资源)，[因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)。\n- [WebGL 贴图](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL)\n- 使用 [`drawImage`](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage) 将 Images/video 画面绘制到 canvas。\n- [来自图像的 CSS 图形 (en-US)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images)\n\n跨源资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 以外的 HTTP 请求，或者搭配某些 [MIME 类型](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types) 的 [`POST`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST) 请求），浏览器必须首先使用 [`OPTIONS`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS) 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 [Cookies](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies) 和 [HTTP 认证](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication) 相关数据）。\n\n\n\n## 接口\n\nsetInterval();  指每隔多少毫秒执行一次函数。因此它有两个参数，第一个参数为每次执行的函数，第二个参数为毫秒。如setInterval( fn, 16 )，返回值为id，用于标识一个setInterval调用。 \n\nsetTimeout() 方法只运行一次，也就是说当达到设定的时间后就开始运行指定的代码，运行完后就结束了，次数是一次。 setInterval() 是循环执行的，即每达到指定的时间间隔就执行相应的函数或者表达式，只要窗口不关闭或clearInterval() 调用就会无限循环下去。\n\ndate对象，包含一系列获取时间的方法\n\n\n\n## [Control abstraction objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects)\n\n控制抽象对象\n\n- [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n- [`GeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction)\n- [`AsyncFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction)\n- [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n- [`AsyncGeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction)\n\n\n\n## Reflection\n\n**Proxy** 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。\n\n```\nconst p = new Proxy(target, handler)\n\nhandler \n包含捕捉器（trap）的占位符对象，可译为处理器对象。\ntraps\n提供属性访问的方法。这类似于操作系统中捕获器的概念。\ntarget\n被 Proxy 代理虚拟化的对象。它常被作为代理的存储后端。根据目标验证关于对象不可扩展性或不可配置属性的不变量（保持不变的语义）。\n```\n\n**`Proxy.revocable()`** 方法可以用来创建一个可撤销的代理对象。细节见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\">此处</a>。\n\n```\nProxy.revocable(target, handler);\n```\n\n","source":"_posts/js.md","raw":"---\ntitle: JavaScript\ndate: 2022-10-30 15:29:37\ntags: JavaScript\n---\n\n# JS\n\n## 基础\n\n```\nJS和python都是解释型语言，仅需解释器在每次执行时编译并解释执行，编译型语言如c++，Java编译一次后，产生可执行文件可多次执行，效率高\n\n<!--本地路径/和\\是等效的-->\n<img src=\".\\Image\\20161025\\guo.jpg\" />\n<img src=\"./Image/20161025/guo.jpg\" />\n<img src=\".\\Image/20161025/guo.jpg\" />\n<img src=\"./Image\\20161025\\guo.jpg\" />\n<!--网络文件路径一定要使用正斜杠/-->\n```\n\n诞生于1995，出现时用于处理网页中的**前端验证**，发展中遵循ECMAScript标准，完整的JavaScript由三部分组成：**ECMAScript标准，DOM文档对象模型，BOM浏览器对象模型**\n\n解释型语言，无需编译直接运行，动态语言，基于原型的面向对象，写在script标签中，从上到下逐条执行；标识符命名仅可以含有字母、数字、_、$\n\n## 变量性质、关键字和特性\n\n区分大小写，允许Unicode字母、数字和表意文字(意味着可以用汉字定义变量但不推荐)\n\n当浏览器开辟出供代码执行的栈[内存](https://so.csdn.net/so/search?q=内存&spm=1001.2101.3001.7020)后，代码并没有自上而下立即执行，而是继续做了一些事情：**把当前作用域中所有带var/function关键字的进行提前的声明和定义 => 变量提升机制**\n\ntypeof 操作符\n\n```js\ntypeof 'aaa';//\"string\"\n```\n\n\n\n### `let`和`var`的区别\n\n `let`和`const`不存在变量提升机制；`var`允许重复声明，而`let`不允许重复声明； `let`能解决`typeof`检测时出现的暂时性死区问题（`let`比`var`更严谨）；let创建的全局变量没有给window设置对应的属性；let会产生块级作用域\n\n- `var`声明是全局作用域或函数作用域，而`let`和`const`是块作用域。\n- `var`变量可以在其范围内更新和重新声明； `let`变量可以被更新但不能重新声明； `const`变量既不能更新也不能重新声明。\n- 它们都被提升到其作用域的顶端。但是，虽然使用变量`undefined`初始化了`var`变量，但未初始化`let`和`const`变量。\n- 尽管可以在不初始化的情况下声明`var`和`let`，但是在声明期间必须初始化`const`。\n\n暂时性死区：在块级顶部到变量正式申明这块区域去访问这个变量的话，直接报错\n\n```js\nvar x = 1;\nif(true) {\n  console.log(x);//报错而不是到外部引用x\n  \n  let x = 2;\n}\n```\n\n\n\n### 六种数据类型\n\n`String` `Number` `Boolean`  `Undefined` `Symbol` `Object` \n\n`Object`为引用数据类型  \n\n- Number\n\n  均采用IEEE 754存储数字，会把能转换为整数的小数转换为整数。科学计数法：3.123e7等效于3.123*10^7\n\n  八进制值用0o做前缀，十六进制0x前缀\n\n  浮点值最高精度为1e-17，不宜用js做科学计算\n\n  `NaN`表示`Not a Number`，数据类型也是`Number`，有`Number.MIN_VALUE`=5E-324，`Number.MAX_VALUE`=1.797e308，还有正无穷 Infinity 和负无穷 -Infinity。函数 isFinite()可以判断数值是不是有限\n\n  isNaN()函数可以判断所给参数是否能转换为数值，不能则返回 true\n\n  ```js\n  isNan('10');//返回false，因为能转化为数字\n  \n  num.toFixed(digits)//浮点数规整化，digits为小数点后保留位数\n  \n  Math.trunc() //return the integer portion of a number\n  ```\n\n  即将支持的 BigInt 大数，在number字面量后加上 n 即可。可以表示任意大整数。\n\n- `null`值用来表示一个为空的对象，`typeof null`时返回`object`类型。原则上 null 表示一个空指针\n\n- string：将其他数据类型转换为String类型：`toString`方法和`String`函数，前者不能转换null和undefined类型，后者可以，凡遇字母转换为`NaN`。  转换为Number类型：Number函数，针对字符串有`parseInt`和`parseFloat`，这两个函数遇到其他类型时会先将对象转换为字符串再进行转换。\n\n  toString()方法在用于数值对象时可以接受参数，表示转换为不同进制的数字字符。\n\n  ```js\n  let num = 10; \n  console.log(num.toString()); // \"10\" \n  console.log(num.toString(2)); // \"1010\" \n  console.log(num.toString(8)); // \"12\" \n  console.log(num.toString(10)); // \"10\" \n  console.log(num.toString(16)); // \"a\" \n  ```\n\n  *用加号操作符给一个值加上一个空字符串\"\"也可以将其转换为字符串*\n\n  - ``反引号，不同于单引号''和双引号\"\"，可以包裹模板字符串，能够允许嵌入表达式的字符串字面量，嵌入${expression}即可\n\n  - 标签函数标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。 标签函数本身是一个常规函数，通过前缀到模板字面量来应用自定义行为。\n\n    ```js\n    let a = 6; \n    let b = 9; \n    function simpleTag(strings, ...expressions) { \n        console.log(strings); \n        for(const expression of expressions) { \n            console.log(expression); \n        } \n        return 'foobar'; \n    } \n    let taggedResult = simpleTag`${ a } + ${ b } = ${ a + b }`; \n    // [\"\", \" + \", \" = \", \"\"] 字符串数组\n    // 6 \n    // 9 \n    // 15 \n    console.log(taggedResult); // \"foobar\" \n    \n    ```\n\n  - 用模板字面量也可以直接获取原始的模板字面量内容。在标签函数的第一个参数中，存在一个特殊的属性`raw`，其他地方无法对字符串数组使用。\n\n- Symbol类型：唯一标识符，具有唯一性、隐藏性（用作对象属性名时无法通过object.key访问，而需要定制的object.getOwnPropertySymbols()方法得到对象中所有用作属性名的symbol）\n\n  ```js\n  let id1 = Symbol('id');\n  let id2 = Symbol('id');\n  console.log(id1===id2);//false\n  \n  let id3 = Symbol.for('id');\n  console.log(id1===id3);//false\n  \n  let id4  =Symbol.for('id');\n  console.log(id3===id4)//true\n  ```\n\n  全局注册并登记，使得相同参数注册的值symbol相等。前提是都通过for注册登记。\n\n  \n\n数字0，空字符串，NaN，空指针null，undefined都可以自动转化为false\n\nnull 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 **对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。**因此，**需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。**\n\n## 基础语句\n\n\\=\\=运算符会做强制类型转换\t\\=\\=\\=不会，单引号双引号和python一样，都可以用来包裹字符串，无区别。\n\ntypeof 操作符，返回其后变量或字面量的类型\n\n\\+ 能做数字间的加减运算，当任一对象为字符串时会把另一参加运算对象转化为字符串再进行字符串拼接，参与运算对象为 object 或其他类型时会先转换为字符串再按如上规则运算\n\n- try{}catch{}finally{}\n\n  1.try中有return, 会先将值暂存，无论finally语句中对该值做什么处理，最终返回的都是try语句中的暂存值。\n\n  2.当try与finally语句中均有return语句，会忽略try中return。\n\n### 空值合并运算符\n\n**空值合并操作符**（**`??`**）是一个逻辑操作符，当左侧的操作数为 [`null`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null) 或者 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined) 时，返回其右侧操作数，否则返回左侧操作数。\n\n与[逻辑或操作符（`||`）不同，逻辑或操作符会在左侧操作数为[假值](https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy)时返回右侧操作数。也就是说，如果使用 `||` 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，`''` 或 `0`）时。\n\n```js\nconst foo = null ?? 'default string';\nconsole.log(foo);\n// expected output: \"default string\"\n\nconst baz = 0 ?? 42;\nconsole.log(baz);\n// expected output: 0\n\nconst baz = 0 || 42;\nconsole.log(baz);\n// expected output: 42\n```\n\n逻辑空赋值 ??=\n\nx ??= y ，x为null或undefined时才赋值为右值。\n\n### 可选链操作符\n\n?.\tTS中遇到过\n\n判断是否为空\n\n\n\n### 解构赋值\n\nES6 \n\n- 数组结构赋值：\n\n  只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n  ```js\n  let [a=1,b=2]=[4,5]\n  \n  \n  ```\n\n  \n\n- 对象解构赋值：\n\n  注意loc: { start }和loc: start是不一样的，前者把start也作为模式串，而后者只有loc是模式串\n\n  ```js\n    const node = {\n      loc: {\n        start: {\n          line: 1,\n          column: 5\n        }\n      }\n    };\n    let { loc, loc: { start }, loc: { start: { line }} } = node;\n    line // 1\n    loc  // Object {start: Object}\n    start // Object {line: 1, column: 5}\n  ```\n\n  默认值，生效的条件是，对象的属性值严格等于`undefined`。\n\n  ```js\n  var {x = 3} = {x: undefined};\n  x // 3var \n  \n  {x = 3} = {x: null};\n  x // null\n  ```\n\n  由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n  ```js\n  let arr = [1, 2, 3];\n  let {0 : first, [arr.length - 1] : last} = arr;//index\n  first // 1\n  last // 3\n  ```\n\n\n\n\n\n\n\n## 常用方法\n\n### forEach\n\n```\n// 箭头函数\nforEach(() => { /* … */ } )\nforEach((value) => { /* … */ } )\nforEach((value, key) => { /* … */ } )\nforEach((value, key, map) => { /* … */ } )\n\n// 回调函数\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n\n// 内联回调函数\nforEach(function() { /* … */ })\nforEach(function(value) { /* … */ })\nforEach(function(value, key) { /* … */ })\nforEach(function(value, key, map) { /* … */ })\nforEach(function(value, key, map) { /* … */ }, thisArg)\n```\n\n\n\n\n\n## Map和Set\n\n- 一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。\n- Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。\n\nSet 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。重复值的元素会被略去。\n\n```\nSet.prototype.add(value)\n在Set对象尾部添加一个元素。返回该 Set 对象\n\nSet.prototype.delete(value)\n移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。\n\nSet.prototype.has(value)\n返回一个布尔值，表示该值在 Set 中存在与否。\n\nSet.prototype.clear()\n移除Set对象内的所有元素。\n\nSet.prototype.forEach(callbackFn[, thisArg])\n按照插入顺序，为 Set 对象中的每一个值调用一次 callBackFn。如果提供了thisArg参数，回调中的 this 会是这个参数。\n\nSet.prototype.values()\n返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。\n```\n\nlet newArray = Array.from(set)，可以把括号内的对象转换为array并返回\n\n\n\n```\nMap.prototype.size\n返回 Map 对象中的键值对数量。\n\nMap.prototype.get(key)\n返回与 key 关联的值，若不存在关联的值，则返回 undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，用来表明 Map 对象中是否存在与 key 关联的值。\n\nMap.prototype.set(key, value)\n在 Map 对象中设置与指定的键 key 关联的值 value，并返回 Map 对象。\n\nMap.prototype.delete(key)\n移除 Map 对象中指定的键值对，如果键值对存在并成功被移除，返回 true，否则返回 false。调用 delete 后再调用 Map.prototype.has(key) 将返回 false。\n```\n\n### WeakMap\n\n**`WeakMap`** 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。\n\nmap API *可以* 通过使其四个 API 方法共用两个数组（一个存放键，一个存放值）来实现。给这种 map 设置值时会同时将键和值添加到这两个数组的末尾。从而使得键和值的索引在两个数组中相对应。当从该 map 取值的时候，需要遍历所有的键，然后使用索引从存储值的数组中检索出相应的值。\n\n但是存在两个缺点：\n\n1. 首先赋值和搜索操作都是 *O(\\*n*)* 的时间复杂度（*n* 是键值对的个数），因为这两个操作都需要遍历全部整个数组来进行匹配。\n2. 另外一个缺点是可能会导致内存泄漏，因为数组会一直引用着每个键和值。这种引用使得垃圾回收算法不能回收处理他们，即使没有其他任何引用存在了。\n\n相比之下，原生的 `WeakMap` 持有的是每个键对象的“弱引用”，这意味着在没有其他引用存在时垃圾回收能正确进行。原生 `WeakMap` 的结构是特殊且有效的，其用于映射的 key _只有_在其没有被回收时才是有效的。\n\n**正由于这样的弱引用，`WeakMap` 的 key 是不可枚举的**（没有方法能给出所有的 key）。如果 key 是可枚举的话，其列表将会受垃圾回收机制的影响，从而得到不确定的结果。因此，如果你想要这种类型对象的 key 值的列表，你应该使用 [`Map`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)。\n\n- [`WeakMap.prototype.delete(key)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n\n  删除 WeakMap 中与 `key` 相关联的值。删除之后， `WeakMap.prototype.has(key)` 将会返回 `false`。\n\n- [`WeakMap.prototype.get(key)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n\n  返回 WeakMap 中与 `key` 相关联的值，如果 `key` 不存在则返回 `undefined`。\n\n- [`WeakMap.prototype.has(key)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)\n\n  返回一个布尔值，断言一个值是否已经与 `WeakMap` 对象中的 `key` 关联。\n\n- [`WeakMap.prototype.set(key, value)`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n\n  给 `WeakMap` 中的 `key` 设置一个 `value`。该方法返回一个 `WeakMap` 对象。\n\n## 数组\n\n\n\n```\npop()删除末尾元素 ，返回移除的数组元素；\npush(ele)末尾添加元素 ele，返回添加后数组的长度；\nshift()删除首元素并移动数组位置 ，返回添加后数组的长度；\nunshift(ele)在数组首位置添加元素ele，返回添加后数组的长度；\n\nshift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。\n\nunshift方法\nunshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度（该方法修改原有数组）\narr.unshift(element1, ..., elementN)\n返回其 length 属性值\n\nArray.isArray(val):判断val是不是数组\n\nArray.prototype 属性表示 Array 构造函数的原型，并允许向所有Array对象添加新的属性和方法。或者说，允许利用prototype向任何对象添加属性和方法，从而应用到对象的所有实例上\n```\n\n### 遍历操作\n\n最常用for (var i = 0; i < a.length; i++) {\n    // Do something with a[i]\n}\n\nfor (. of array)：for (const currentValue of a)  {// Do something with currentValue}\n\nfor(. in array)：for (var i in a) {// 操作 a[i]}遍历索引，如果直接向 Array.prototype 添加了新的属性，使用这样的循环这些属性也同样会被遍历。不推荐这个循环\n\nforEach()：\narray.forEach(function(currentValue, index, array) {// 操作 currentValue 或者 array[index]});\n\n注: forEach() 对于空数组是不会执行回调函数的。\n\n### [Array.prototype.at()](https://link.segmentfault.com/?enc=gIfegOUoZxxLBOg%2FnmpAvw%3D%3D.it%2BTiWVsG0Y95ewedhlKoMS2CPXZSbhECA0MBePgVHbbS3pnn4r95vxFQo8Wnk%2BrFcIZQbnMXjwFeEBW9uTMx%2FmnhkJ0ck8W%2FV9MIZGB4SZb5GqmV1RLVPtXvNkMw7kq)\n\n- 返回at中参数指向的index的数组元素，支持负数\n\n### array.prototype.concat()\n\n拼接两个数组\n\n```js\nconcat()\nconcat(value0)\nconcat(value0, value1)\nconcat(value0, value1, /* … ,*/ valueN)\n```\n\n`valueN` 可选\n\n数组和/或值，将被合并到一个新的数组中。如果省略了所有 `valueN` 参数，则 `concat` 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。\n\n\n\n###  array.indexOf\n\n- 判断数组中是否存在某个值，如果存在返回数组元素的下标，否则返回-1\n\n### array.includes(searchElement[, fromIndex])\n\n- 判断一个数组是否包含一个指定的值，如果存在返回 true，否则返回false。\n\n### reduce()方法 \n\n**`reduce()`** 方法对数组中的每个元素按序执行一个由您提供的 **reducer** 函数，每一次运行 **reducer** 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n\n```js\narray.reduce(\n\tfunction(\n\t\ttotal,\n\t\tcurrentValue,\n\t\t[currentIndex,\n\t\t[arr]]),\n\t[initialValue])\n```\n\nreduce() 方法接收一个回调函数作为参数，reduce 为数组中的每一个元素依次执行回调函数，回调函数接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。\nreduce方法的返回值为回调函数最后的返回值。\n\n如果没有提供initialValue，那么reduce的第一轮回调函数中的“total”就arr[0]，“current_Value”就是arr[1]，index就是1；\n\n如果提供initialValue，那么reduce的第一轮回调函数中的“total”就是initialValue，“current_Value”就是arr[0]，index就是0。\n\n所以在使用reduce函数时，回调函数中return最好不要省，而且initialValue也最好不要省！！！\n\n### filter() 方法\n\n返回一个新数组，其包含通过所提供函数实现的测试的所有元素。 \n\nvar newArray = arr.filter(callback(element[, index[, array]])[, thisArg])\n\n上式中 element 必需，后三者都可选，但没传 index 则 array 也不能传\n\n注：当所过滤的数组是对象数组的情况时，对新返回的数组元素属性做出修改，同时对原数组也会造成影响；当过滤数组为纯数组时，修改不会改变原数组。也就是浅拷贝\n\n### from方法\n\nArray.from(arrayLike[, mapFn[, thisArg]])参数分别为伪数组对象或可迭代对象，新数组中的每个元素会执行的回调函数，执行回调函数 mapFn 时 this 对象\n返回一个新的数组实例。\n\nArray.from(arrayLike[, mapFunction[, thisArg]])：arrayLike：必传参数，想要转换成数组的伪数组对象或可迭代对象。\nmapFunction：可选参数，mapFunction(item，index){...} 是在集合中的每个项目上调用的函数。返回的值将插入到新集合中。\nthisArg：可选参数，执行回调函数 mapFunction 时 this 对象。这个参数很少使用。\n\n### array.map() 方法\n\n返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值，按照原始数组元素顺序依次处理元素。\narray_back=array.map(function(currentValue,index,arr), thisValue)\n\n注：map()方法不会对空数组进行检测；也不会改变原数组\n\neg.\tlet arr = new Array( 2 ).fill( 0 ).map( _ => new Array( 3 ) ); //作用类似C语言：int arr[2][3]\n\n### arr.slice([begin[, end]])\n\n- `begin` 可选，可为负。如果 `begin` 大于[数组](https://so.csdn.net/so/search?q=数组&spm=1001.2101.3001.7020)长度，返回空数组。slice(-1) 提取最后一个元素，slice(-2)提取最后两个元素，依次类推。前包后不包。\n  [slice](https://so.csdn.net/so/search?q=slice&spm=1001.2101.3001.7020)() 返回整个数组。\n\n### array.splice(start[, deleteCount[, item1[, item2[, ...]]]])\n\n- start 指定修改的开始位置（从 0 计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从 -1 计数，这意味着 -n 是倒数第 n 个元素并且等价于 `array.length-n`）；如果负数的绝对值大于数组的长度，则表示开始位置为第 0 位。\n- deleteCount :整数，表示要移除的数组元素的个数。如果 `deleteCount` 大于 `start` 之后的元素的总数，则从 `start` 后面的元素都将被删除（含第 `start` 位）。如果 `deleteCount` 被省略了，或者它的值大于等于`array.length - start`(也就是说，如果它大于或者等于`start`之后的所有元素的数量)，那么`start`之后数组的所有元素都会被删除。如果 `deleteCount` 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。\n- item:从start位置要添加进数组的元素，不指定时 splice 将只删除元素。\n\n返回被删除的元素\n\n### arr.sort([compareFn])\n\n如果没有指明 `compareFn` ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 \"Banana\" 会被排列到 \"cherry\" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 `compareFn`），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 \"80\" 要比 \"9\" 要靠前。\n\n- 如果 `compareFn(a, b)` 大于 0 ， b 会被排列到 a 之前。\n- 如果 `compareFn(a, b)` 小于 0 ，那么 a 会被排列到 b 之前；\n- 如果 `compareFn(a, b)` 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n- `compareFn(a, b)` 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n\n\n\n### strArr.join(separator)\n\n- 用输入参数分隔输入字符串数组的每个元素，返回新字符串\n\n## 字符串\n\n可以直接用比较符号比较字符串\n\n### 编码\n\nescape-unescape方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。\n\nencodeURI-decodeURI对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的： , / ? : @ & = + $ # \n\nencodeURIComponent-decodeURIComponent该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。其他字符（比如 ：;/?:@&=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。\n\n**1、如果只是[编码字符串](https://www.zhihu.com/search?q=编码字符串&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={\"sourceType\"%3A\"answer\"%2C\"sourceId\"%3A20300871})，不和URL有半毛钱关系，那么用escape。**\n\n**2、如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。**\n\n比如\n\n```js\nencodeURI(\"http://www.cnblogs.com/season-huang/some other thing\");\n```\n\n编码后会变为\n\n```js\n\"http://www.cnblogs.com/season-huang/some%20other%20thing\";\n```\n\n其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为\n\n```js\n\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"\n```\n\n看到了区别吗，连 \"/\" 都被编码了，整个URL已经没法用了。\n\n**3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。**\n\n### String.prototype.charAt(index)\n\n指定 `index` 处字符，参数不在 0 和字符串的 length-1 之间，则返回空字符串\n\n### String.prototype.charCodeAt(index)\n\nindex：一个大于等于 `0`，小于字符串长度的整数。如果不是一个数值，则默认为 `0`。\n\n返回值：指定 `index` 处字符的 UTF-16 代码单元值的一个数字；如果 `index` 超出范围，`charCodeAt()` 返回 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)。\n\n如果指定的 `index` 小于 `0` 、等于或大于字符串的长度，则 `charCodeAt` 返回 [`NaN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)。\n\n### String.fromCharCode()\n\n静态 **`String.fromCharCode()`** 方法返回由指定的 UTF-16 代码单元序列创建的字符串。\n\n```js\nString.fromCharCode(str[i].charCodeAt()+1); \n```\n\n### indexOf() 和 lastIndexOf()\n\n使用字符串的 indexOf() 和 lastIndexOf() 方法，可以根据参数字符串，返回指定子字符串的下标位置。这两个方法都有两个参数，说明如下。\n\n- 第一个参数为一个子字符串，指定要查找的目标。\n- 第二个参数为一个整数，指定查找的起始位置，取值范围是 0~length-1。\n\n对于第二个参数来说，需要注意一下几个特殊情况。\n\n- 如果值为负数，则视为 0，相当于从第一个字符开始查找。\n- 如果省略了这个参数，也将从字符串的第一个字符开始查找。\n- 如果值大于等于 length 属性值，则视为当前字符串中没有指定的子字符串，返回 -1。\n\n### str.match(reg)\n\n/./g\n\n方法对字符串对象进行检索,返回包含所有匹配结果的数组。而 正则表达式 /./g 匹配的是所有的字符， 所以str.match(/./g)返回的是由字符串str中所有的字符组成的数组，以此达到将字符串转换为数组的目的。 \n\n### str.replace(pattern, replacement)\n\n两个参数均为字符串，寻找到模式串替换为后者。\n\n### str.search(regexp)\n\n返回 str 中给定正则表达式对应索引\n\n### str.slice(a,b)\n\n前包后不包；截取出来的字符串的长度为第二个参数与第一个参数之间的差；若参数值为负数,则将该值加上字符串长度后转为正值；若第一个参数等于大于第二个参数,则返回空字符串.\n\n### str.substring(a,b)\n\n前包后不包；若参数值为负数,则将该值转为0;两个参数中,取较小值作为开始位置,截取出来的字符串的长度为较大值与较小值之间的差.\n\n### str.split(separator)\n\n分割字符串，返回字符数组\n\n### str.substr(a,length)\n\n第一个参数代表开始位置,第二个参数代表截取的长度\n\n\n\n\n\n## 函数\n\n### 基础\n\n```javascript\nvar avg = function(){}<=>function avg(){}\n//js创建函数有两种：一是函数声明function fnName () {…};，二是函数表达式var fnName = function () {…};前者因 js 具有 函数声明提升 所以定义在任何位置均可成功调用，而后者必须等到定义语句被解释后才能正常调用(与 var 的变量定义提升不同)\n//还有一种匿名函数：function () {…}; 使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数，匿名函数属于函数表达式，匿名函数有很多作用，赋予一个变量则创建函数，赋予一个事件则成为事件处理程序或创建闭包等等。\n函数表达式后面可以加括号立即调用该函数，*函数声明不可以，只能以fnName()形式调用* 存疑，在控制台中调用成功。是因为在函数定义前面加了运算符，比如用括号包裹，把它也转换为了表达式。\n总结一下就是当把函数定义为表达式时总能在后面加上括号来立即调用。\n(function() {})()  (function a() {})()  var a=function() {}()  三者均能立即调用。\n```\n\n由 `Function` 构造函数创建的函数不会创建当前环境的闭包，它们总是被创建于全局环境，因此在运行时它们只能访问全局变量和自己的局部变量，不能访问它们被 `Function` 构造函数创建时所在的作用域的变量。这一点与使用 [`eval()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval) 执行创建函数的代码不同。\n\n```js\nlet a = 1\nfunction foo() {\n    console.log(a)\n}\nfunction too() {\n    let a = 2\n    foo()\n}\ntoo() // 1, not 2\n```\n\n```python\nlambda x: x * 8\nlet ans=x => x*8;\n```\n\njs的=>符号类似于lambda\n\n```\n=>是es6中的arrow function语法\n(x) => x + 6\n相当于\nfunction(x){return x + 6;};\n\nconst funcname=(args)=>{...}\t\t函数调用：funcname(args)\n```\n\neval()函数，参数是一个字符串。如果字符串表示的是表达式，`eval()` 会对表达式进行求值。如果参数表示一个或多个 JavaScript 语句，那么`eval()` 就会执行这些语句。如果 `eval()` 的参数不是字符串， `eval()` 会将参数原封不动地返回。\n\n永远不要使用eval()\n\n\n\n\n\n\n\n### 回调\n\n嵌套函数可以访问父函数作用域中的变量，可以利用这个特性减少全局变量的数量，有效地防止“污染”你的全局命名空间——你可以称它为“局部全局（local global）”。换种思路，把全局当作整体函数，那么就能形成作用域链(scope chain)，嵌套者能访问被嵌套者的变量，反之则不行，寻找变量的定义时总是从当前嵌套层或者说从金字塔的当前区域往外(往下)寻找，就近选择。需要注意的是每个函数的金字塔是不同的，在该函数被定义的时候就已经确定了，所以当在函数内部调用之前已定义的函数时，应当回到那个函数的“金字塔”寻找其所需要的变量，当前函数的作用域不会与产生交集。\n\n头等函数(first-class functions)，可以当作参数被传递的函数。回调函数(callback)是被作为参数传递的函数，注意是函数作为参数，而非函数返回值作为参数，与其对应的是高阶函数，是使用回调函数的函数。\n\n回调机制包括三方：起始函数，中间函数，回调函数；起始函数调用中间函数，把回调函数作为参数传递给中间函数。起始函数一般是当前运行的主函数，一般隐藏忽略，主要关注回调函数和把回调函数作为参数的中间函数。\n\n回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。\n\n\n\n### call、apply和bind\n\n`myfunc(...args)<=>myfunc.apply(null,args)`展开语法将数组展开为数组元素。**剩余参数**语法允许我们将一个不定数量的参数表示为一个数组，与展开语法恰恰相反，形式为定义函数时`function fun1(...theArgs){alert(theArgs.length);}`。剩余参数也可以被解构为包含变量，形式为`function f(...[a, b, c]) {return a + b + c;}`. \n\n`apply()` 的第一个参数应该是一个被当作 `this` 来看待的对象。于是这里是全局对象。\n\n\n\n`apply()` 有一个姐妹函数，名叫 [`call`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)，它也可以允许你设置 `this`，但它带有一个扩展的参数列表而不是一个数组。\n\n```js\nfunction.call(thisArg, arg1, arg2, ...)\n```\n\nthisArg是函数执行时的 this 对象。call 实现\n\n```js\nFunction.prototype.myCall = function (context,...args) {\n    // 判断调用对象\n    if (typeof this !== \"function\") {\n    \tthrow new Error(\"Type error\");\n    }\n    let result = null;\n    // 判断 context 是否传入，如果没有传就设置为 window\n    context = context || window;\n\targs = args ? args : []\n\tconst key = Symbol();\n    context[key] = this;\n\t//通过隐式绑定的方式调用函数\n    result = context[key](...args);\n    // 删除手动增加的属性方法\n    delete context[key];\n    // 将执行结果返回\n    return result;\n};\n```\n\n类似的apply实现\n\n```js\nFunction.prototype.myApply=function(context,args){\n\tif (typeof this !== \"function\") {\n    \tthrow new Error(\"Type error\");\n    }\n    args = args ? args : [];\n    const key = Symbol();\n    context[key]=this;\n    const result = context[key](...args);\n    delete context[key];\n    return result;\n}\n```\n\n\n\nbind先返回一个绑定了this的函数，再次执行则在this中执行\n\n```\nvar a ={\n\tname : \"Cherry\",\n\tfn : function (a,b) {\n\t\tconsole.log( a + b)\n\t}\n}\n\nvar b = a.fn;\nb.bind(a,1,2)()           // 3\n```\n\nbind利用apply实现\n\n```js\nFunction.prototype.myBind = function (context, ...args) {\n    const fn = this\n    args = args ? args : []\n    return function newFn(...newFnArgs) {\n        if (this instanceof newFn) {\n            return new fn(...args, ...newFnArgs)\n        }\n        return fn.apply(context, [...args,...newFnArgs])\n    }\n}\n```\n\n\n\n\n\n### 函数柯里化\n\n将接受 **n 个参数的 1 个函数改为只接受一个参数的 n 个互相嵌套的函数**，当前置部分参数一致时，可以通过固定前置参数生成指定函数，简化代码。\n\n对应偏函数是柯里化的宽松情况，不一定需要每一层都只固定一个参数，继承思想即可。\n\n\n\n### 函数参数的传递\n\n有值传递和引用传递，基本类型传递值，引用类型(对象)传递对象的地址，如果在函数中对对象重新赋值，则传递进来的地址改变，即在堆中重新分配一段空间，改变传递进来地址的值指向这个新的地址，不影响原对象。\n\n```\nfunction changeAgeAndReference(person) {\n    person.age = 25;\n    person = {\n        name: \"John\",\n        age: 50\n    };\n\n    return person;\n}\nvar personObj1 = {\n    name: \"Alex\",\n    age: 30\n};\nvar personObj2 = changeAgeAndReference(personObj1);\nconsole.log(personObj1); // -> {name: 'Alex', age: 25}\nconsole.log(personObj2); // -> {name: 'John', age: 50}\n```\n\n对对象的重新赋值在任何地方都是如此：在动态堆中重新分配内存空间并赋值，再把原地址的值改为新对象的地址。\n\n当一个对象没有对应地址指向时，也就是上一段中原对象的情况，这个对象的内存地址会被回收，这是js的垃圾回收机制\n\n\"如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。这就要求实时查看内存占用。\"避免内存泄漏的要点在于往后不会使用的变量要及时赋空。\n\n\n\n\n\n## 闭包、词法环境(作用域)\n\n一个函数和对其周围状态（**lexical environment，词法环境**）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是**闭包**（**closure**）。\n\n- 用于保存私有属性：将不需要对外暴露的属性、函数保存在闭包函数的父函数里，避免外部操作对值的干扰\n- 避免局部属性污染全局变量空间导致的命名空间混乱\n- 模块化封装，将对立的功能模块通过闭包进去封装，只暴露较少的 API 供外部应用使用\n\n缺点：内存消耗，由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。\n\nc语言退出函数时局部变量也会退出其作用域，所以难以创建闭包；js创建函数时会保留其能访问的变量的地址，这也是创建闭包的前提所在。\n\n\n\n词法环境有两大成员：**「Environment Record（环境记录）」**，可能为 null 的 **「Outer Lexical Environment（外部词法环境引用）」**。**任何在环境记录中的标识符都可以在当前词法环境直接以标识符形式访问**。\n\nEnvironment Record 是一个抽象类，存在三个具体的子类，**「Declarative Environment Record」** ，**「Object Environment Record」**，**「Global Environment Record（全局环境记录）」**\n\n声明式环境记录保存 let、const、function 等非 var 声明标识符，对象式环境记录保存 var 声明标识符。 \n\n### 对象式环境记录\n\n对象式记录也是用于记录标识符与变量的映射，但是它只记录var声明的标识符 ； 并且它有一个关联的绑定对象(binding object)。\n\n- 在词法环境中，会为对象式环境记录中所有的标识符绑定到绑定对象的同名属性上。\n  例如var number=1000; , 也能够通过window.number形式获取到number的值。\n- 反过来也可以，会将绑定对象的所有属性名（自然也必须是能做标识符的）绑定到对象式环境记录中的同名标识符上。\n  例如：window.thousand = 1000; 然后直接以 thousand就能获取到该值（严格模式下报错）\n\n- 每个标识符在绑定后都会直接实例化并初始化为undefined ，如果标识符已经绑定了绑定对象上的原有属性上，那么该变量就是对应属性值 。\n  比如之前的isNaN在声明前使用时就有值，就是这个原因。\n  变量提升也是这个原因造成的。\n- 如果标识符已经存在，那么无视之，所以var可以重复声明。\n\n### 声明式环境记录\n\n同样的，声明式环境记录也比较特殊，它只记录非var声明的标识符，例如let、const、function……声明的标识符等等。并且它没有关联的绑定对象。\n\n- 所有声明的标识符（这里应该包含var声明的标识符，但不建立关联）都位于此处。\n\n- 将所有非var声明的标识符实例化，但不初始化，也就是变量处于uninitialized状态。也就是说内存中已经为变量预留出空间，但是还没有和对应的标识符建立绑定关系。\n- 在执行上下文的运行（perform状态）阶段，并执行到声明语句时，才会真正初始化并默认赋值为undefined。\n  所以你就懂了，let声明的标识符之前无法访问，就是因为还没有建立绑定。\n  暂存死区的根本原因在此。\n\n- 在声明式环境记录中，**不允许出现重复的标识符**，所以它无法重复。甚至和var声明的标识符冲突。注意，它会在代码加载后的预编译阶段（只能说是运行前，因为JS没有真正的预编译啊……）就已经完成。\n\n全局环境记录包含前两者，是底层记录形式，绑定对象为 window 。\n\n```js\nfunction f(a,b){\n    var t = 10;\n    let sum = 10;\n    {\n        let sum = a+b;\n        var mul = a*b +sum;\n    }\n    return  mul*t;\n}\nf(20,30) // 6500\n\n\n//词法环境\nFunctionEnv = {\n    This:<window>\n    outerEnv:<GlobalEnv>,\n    ObjRec:{\n        t:<10>,\n        mul:<650>\n    },\n    DecRec:{\n        sum:<10>\n    }\n}\n\nBlockEnv={\n    This:<window>,\n    outerEnv:<FunctionEnv>,\n    DecRec:{\n        sum:<50>\n    }\n}\n\n```\n\n函数属于声明式环境记录是因为存在块级作用域，var 剥离出的环境记录只有全局作用域和函数作用域。\n\n声明式对应 LexEnv，对象式对应 VarEnv\n\n## 面向对象\n\nthis和new\n\n```\nthis 使用在函数中时被用来指向当前调用函数的对象，也即在对象上使用. or [] 访问属性或者方法时，this就相当于这个对象，如果没有. or []依附对象进行直接访问时，this将指向全局对象（global object），也即访问全局属性/变量或者方法/函数。\nGlobal execution context in scripts:this指全局对象-一个名字叫global的对象\nGlobal execution context in modules：this返回undefined\n\n\nnew 创建一个崭新的空对象，然后使用指向那个对象的 this 调用特定的函数，修改this对象的属性。如果你没有使用 new 运算符，构造函数会像其他的常规函数一样被调用，并不会创建一个对象。在这种情况下，this 的指向也是不一样的。\n```\n\nfor ... in object 可以遍历对象的所有属性，利用全局对象Object的方法keys可以获得属性名数组，例如有对象实例student，Object.keys(student)为student的所有属性名数组。判断对象是否包含某一属性可以用 in ，'keyName' in objectName 是bool值。当通过类实例化时，虽然方法可以访问，in也报true，但方法不属于对象本身，而是属于类。\n\nconst objectName={}，引用关系不可变，但引用内容可变，意思是仍然可以为对象分配属性。\n\n类也是对象。js引擎会自动把常量包装成对象，以能使用对应的对象方法。如length等。\n\n\n\nES6中在对象中添加方法时可以不写key而是直接像下面这样\n\n```\nobjectName{\n...\n\tfuncName(args...){\n\t...\n\t}\n...\n};\n\nsame as\n\nobjectName{\n...\n\tfuncName:function(args...){\n\t...\n\t}\n...\n};\n\nλ-calculus\n```\n\n\n\n以下写法在ES6中合法\n\n```\nlet obj={\n\tname:\"hh\",\n\tage:\"13\"\n}\n\nlet {name,age}=obj;\n```\n\n\n\n`Object.defineProperty(object, property, methods)`\t\n\n第一个参数是一个对象，第二个参数是给该对象设置的属性名称，第三个参数是配置该属性的方法，比如set/get方法\n\n在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\n\n## 防抖节流\n\n防抖：多次连续触发只执行一次\n\n节流：一段时间内连续触发只执行一次，冷却时间过了可以继续\n\n```vue\n<template>\n    <div id=\"content\" \n         style=\"height:150px;\n                line-height:150px;\n                text-align:center; \n                color: #fff;background-color:black;\n                font-size:80px;\">\n    </div>\n</template>\n\n \n<script>\n    let num = 1;\n    const content = document.getElementById('content');\n    function count() {\n        content.innerHTML = num++;\n    };\n    content.onmousemove = count;\n\t//防抖 非立即执行版\n\tfunction debunce(func,wait,...args){\n        let timeout;\n        return function(){\n            const context = this;\n            if(timeout) clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                func.apply(context,args);\n            },wait);\n        }\n    }\n    //防抖 立即执行\n    function debunce(func,wait,...args){\n        let timeout;\n        return function(){\n            const context = this;\n            let callNow = !timeout;\n            if(timeout) clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                timeout = null;\n            },wait)\n            if(callNow) func.apply(context,args);\n        }\n    }\n    \n    //节流 时间戳立即执行\n    function throttle(func,wait,...args){\n        let pre=0;\n        return function(){\n            const context = this;\n            let now = Date.now();\n            if(now-pre>=wait){\n                func.apply(context,args);\n                pre=Date.now();\n            }\n        }\n    }\n    //节流 延时器延迟执行\n    function throttle(func,wait,...args){\n        let timeout=0;\n        return function(){\n            const context = this;\n            if(!timeout){\n                timeout=setTimeout(()=>{\n                    timeout=null;\n                    func.apply(context,args);\n                },wait);\n            }\n        }\n    }\n</script>\n```\n\n\n\n## 异步和同步\n\n异步任务分为宏任务和微任务\n\n**宏任务：**script/外层同步代码，定时器`setTimeout`，`setInterval`，node中的setImmediate，`事件绑定`，`回调函数`，`node中的fs模块`\n\n**微任务：**`new Promise().then(回调)`，`process.nextTick()`，`async await`,`Object.observe`,`MutaionObserver`\n\nEvent Loop的执行顺序是：\n\n1. 首先执行执行栈里的任务。\n2. 执行栈清空后，检查微任务（microtask）队列，将可执行的微任务全部执行。\n3. 取宏任务（macrotask）队列中的第一项执行。\n4. 回到第二步。\n\nawait后面的函数会先执行一遍，然后就会跳出整个async函数来执行后面js栈（后面会详述）的代码。等本轮事件循环执行完了之后又会跳回到async函数中等待await后面表达式的返回值。\n\n```\nconsole.log(\"script start\");\n\nasync function async1() {\n  await async2();\n  console.log(\"async1 end\");\n}\n\nasync function async2() {\n  console.log(\"async2 end\");\n}\n\nasync1();\n\nsetTimeout(function () {\n  console.log(\"setTimeout\");\n}, 0);\n\nnew Promise((resolve) => {\n  console.log(\"Promise\");\n  resolve();\n})\n  .then(function () {\n    console.log(\"promise1\");\n  })\n  .then(function () {\n    console.log(\"promise2\");\n  });\n\nconsole.log(\"script end\");\n// script start => async2 end => Promise => script end => async1 end=> promise1 => promise2 => setTimeout\n```\n\nPromise\n\n第一段调用了Promise构造函数，第二段是调用了promise实例的.then方法。promise的构造函数是同步执行，promise.then中的函数是异步执行。\n\npromise实例有三种状态：\n\n- pending（待定）\n- fulfilled（已执行）/或者也可形象地叫做resolved\n- rejected（已拒绝）\n\n调用resolve和reject能将分别将promise实例的状态变成fulfilled和rejected，只有状态变成已完成（即fulfilled和rejected之一），才能触发状态的回调\n\n```\nlet p = new Promise((resolve, reject) => {\n  // 做一些事情\n  // 然后在某些条件下resolve，或者reject\n  if (/* 条件随便写^_^ */) {\n    resolve()\n  } else {\n    reject()\n  }\n})\n\np.then(() => {\n    // 如果p的状态被resolve了，就进入这里\n}, () => {\n    // 如果p的状态被reject\n})\n```\n\n\n\n- 多个 then() 链式调用，**并不是连续的创建了多个微任务并推入微任务队列**，因为 then() 的返回值必然是一个 Promise，而后续的 then() 是上一步 then() 返回的 Promise 的回调\n\n- 按照规范\n\n  ```arcade\n  async function async1(){\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n  }\n  ```\n\n  可以转化为：\n\n  ```arcade\n  function async1(){\n    console.log('async1 start')\n    return RESOLVE(async2())\n        .then(() => { console.log('async1 end') });\n  }\n  ```\n\n- `RESOLVE(p)`接近于`Promise.resolve(p)`，不过有微妙而重要的区别：p 如果本身已经是 Promise 实例，Promise.resolve 会直接返回 p 而不是产生一个新 promise；\n\n- 如果`RESOLVE(p)`严格按照标准，应该产生一个新的 promise，尽管该 promise 确定会 resolve 为 p，**但这个过程本身是异步的**，也就是现在进入 job 队列的是**新 promise 的 resolve 过程**，所以该 promise 的 then 不会被立即调用，而要等到当前 job 队列执行到前述 resolve 过程才会被调用，然后其回调（也就是继续 await 之后的语句）才加入 job 队列，所以时序上就晚了\n\n- 所以上述的 async1 函数我们可以进一步转换一下：\n\n  ```arcade\n  function async1(){\n    console.log('async1 start')\n    return new Promise(resolve => resolve(async2()))\n      .then(() => {\n        console.log('async1 end')\n      });\n  }\n  ```\n\n## JSON\n\nJSON对象有两个方法。JSON支持三种类型值：简单值（不包括 undefined ，字符串、数字、null，布尔值均可），对象，数组。也没有分号\n\nJSON.stringify()\n\nJSON.parse()\n\n\n\n## 网络请求和远程资源\n\nAjax\n\nasynchronous JavaScript and XML\n\n### XMLHttpRequest对象-XHR\n\nXHR对象类型\n\n```json\n{\n    //XMR方法\n\topen:function(method,url,isAsync),//必须首先使用的方法\n\tsetRequestHeader:function(HeaderKey:string,HeaderValue:any)//自定义发送头部的信息，必须在open之后，send之前调用此函数。需要区别于浏览器正常发送头部，因为部分浏览器允许重写默认头部，某些则会引起错误\n\tsend:function(arg),//参数为请求体数据，不存在请求体时参数需显示设置为 null\n\n\t//readyState变化时自动调用此函数\n\tonreadystatechange:function(),\n\n\t//获取响应头部信息\n\tgetResponseHeaders:function(headerKey:string),\n\tgetAllResponseHeaders():function(),\n\t\n\t//send 方法执行得到返回内容之后，这些属性会被填充\n\tresponseType:\"\",\n\tresponseText:\"string\",//响应体文本\n\tresponseXML:XML DOM,//响应类型为 text/xml 或者 application/xml 时返回的包含响应式数据的 XML DOM 文档\n\tstatus:statusCode,//响应HTTP状态码 2xx表示成功，304表示资源未修改，直接从浏览器缓存读取，此两种情况都表示响应有效\n\tstatusText:'description',//HTTP状态描述信息\n\n\n\t//状态属性\n\treadyState:0|1|2|3|4,//五种状态，0表示未调用 open 方法，未初始化，1表示已 open 但未 send，2表示 sent 但未收到响应，3表示收到部分响应 receiving ，4表示完成，已收到所有响应 complete。\n\n\t//收到响应之前可调用此方法终止异步请求，同时应当取消对该XHR对象的引用\n\tabort:function(),\n\t\n}\n```\n\n\n\n```js\n//创建XHR对象\nlet xhr = new XMLHttpRequest();\n\n//使用XMR对象\n//首先必须使用open方法，三个参数依次是\t请求类型：string，请求URL：string，是否异步：Boolean；这里的URL是相对于代码所在的页面的，必须遵守同源策略（同一域名，同一端口，同一协议），否则抛出安全错误。\nxhr.open('get','example.com',false);\nxhr.setRequestHeader('myHaeder','myValue');\nxhr.send(null);\n```\n\nsend时XHR默认会发送的头部字段：\n\n- Accept 浏览器可以处理的内容类型\n- Accept-Charset 浏览器支持显示的字符集\n- Accept-Encoding 浏览器可以处理的压缩编码类型\n- Accept-Language 浏览器使用的语言\n- Connection 浏览器与服务器的连接类型\n- Cookie 页面中设置的Cookie\n- Host 发送请求的页面所在的域\n- Referer 发送请求的页面的 URL ，将错就错，正确拼法是 referre\n- User-Agent 浏览器的用户代理字符串 \n\n#### Get请求\n\nThe `encodeURIComponent()` method **encodes** a URI component. Use the [decodeURIComponent()](https://www.w3schools.com/jsref/jsref_decodeuricomponent.asp) function to **decode** an encoded URI component.\n\n#### Post请求\n\n\n\n### CORS\n\n跨域资源共享 Cross-origin Resource Share使用场景：\n\n- 由 [`XMLHttpRequest`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 或 [Fetch APIs](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API) 发起的跨源 HTTP 请求。\n- Web 字体 (CSS 中通过 `@font-face` 使用跨源字体资源)，[因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)。\n- [WebGL 贴图](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL)\n- 使用 [`drawImage`](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage) 将 Images/video 画面绘制到 canvas。\n- [来自图像的 CSS 图形 (en-US)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images)\n\n跨源资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 [`GET`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 以外的 HTTP 请求，或者搭配某些 [MIME 类型](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types) 的 [`POST`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST) 请求），浏览器必须首先使用 [`OPTIONS`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS) 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 [Cookies](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies) 和 [HTTP 认证](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication) 相关数据）。\n\n\n\n## 接口\n\nsetInterval();  指每隔多少毫秒执行一次函数。因此它有两个参数，第一个参数为每次执行的函数，第二个参数为毫秒。如setInterval( fn, 16 )，返回值为id，用于标识一个setInterval调用。 \n\nsetTimeout() 方法只运行一次，也就是说当达到设定的时间后就开始运行指定的代码，运行完后就结束了，次数是一次。 setInterval() 是循环执行的，即每达到指定的时间间隔就执行相应的函数或者表达式，只要窗口不关闭或clearInterval() 调用就会无限循环下去。\n\ndate对象，包含一系列获取时间的方法\n\n\n\n## [Control abstraction objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects)\n\n控制抽象对象\n\n- [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n- [`GeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction)\n- [`AsyncFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction)\n- [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n- [`AsyncGeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction)\n\n\n\n## Reflection\n\n**Proxy** 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。\n\n```\nconst p = new Proxy(target, handler)\n\nhandler \n包含捕捉器（trap）的占位符对象，可译为处理器对象。\ntraps\n提供属性访问的方法。这类似于操作系统中捕获器的概念。\ntarget\n被 Proxy 代理虚拟化的对象。它常被作为代理的存储后端。根据目标验证关于对象不可扩展性或不可配置属性的不变量（保持不变的语义）。\n```\n\n**`Proxy.revocable()`** 方法可以用来创建一个可撤销的代理对象。细节见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\">此处</a>。\n\n```\nProxy.revocable(target, handler);\n```\n\n","slug":"js","published":1,"updated":"2022-10-30T07:49:50.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9v1yib00001lwvp1v6u7jz9","content":"<h1 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">JS和python都是解释型语言，仅需解释器在每次执行时编译并解释执行，编译型语言如c++，Java编译一次后，产生可执行文件可多次执行，效率高\n\n&lt;!--本地路径&#x2F;和\\是等效的--&gt;\n&lt;img src&#x3D;&quot;.\\Image\\20161025\\guo.jpg&quot; &#x2F;&gt;\n&lt;img src&#x3D;&quot;.&#x2F;Image&#x2F;20161025&#x2F;guo.jpg&quot; &#x2F;&gt;\n&lt;img src&#x3D;&quot;.\\Image&#x2F;20161025&#x2F;guo.jpg&quot; &#x2F;&gt;\n&lt;img src&#x3D;&quot;.&#x2F;Image\\20161025\\guo.jpg&quot; &#x2F;&gt;\n&lt;!--网络文件路径一定要使用正斜杠&#x2F;--&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>诞生于1995，出现时用于处理网页中的<strong>前端验证</strong>，发展中遵循ECMAScript标准，完整的JavaScript由三部分组成：<strong>ECMAScript标准，DOM文档对象模型，BOM浏览器对象模型</strong></p>\n<p>解释型语言，无需编译直接运行，动态语言，基于原型的面向对象，写在script标签中，从上到下逐条执行；标识符命名仅可以含有字母、数字、_、$</p>\n<h2 id=\"变量性质、关键字和特性\"><a href=\"#变量性质、关键字和特性\" class=\"headerlink\" title=\"变量性质、关键字和特性\"></a>变量性质、关键字和特性</h2><p>区分大小写，允许Unicode字母、数字和表意文字(意味着可以用汉字定义变量但不推荐)</p>\n<p>当浏览器开辟出供代码执行的栈<a href=\"https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020\">内存</a>后，代码并没有自上而下立即执行，而是继续做了一些事情：<strong>把当前作用域中所有带var&#x2F;function关键字的进行提前的声明和定义 &#x3D;&gt; 变量提升机制</strong></p>\n<p>typeof 操作符</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"string\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"let和var的区别\"><a href=\"#let和var的区别\" class=\"headerlink\" title=\"let和var的区别\"></a><code>let</code>和<code>var</code>的区别</h3><p> <code>let</code>和<code>const</code>不存在变量提升机制；<code>var</code>允许重复声明，而<code>let</code>不允许重复声明； <code>let</code>能解决<code>typeof</code>检测时出现的暂时性死区问题（<code>let</code>比<code>var</code>更严谨）；let创建的全局变量没有给window设置对应的属性；let会产生块级作用域</p>\n<ul>\n<li><code>var</code>声明是全局作用域或函数作用域，而<code>let</code>和<code>const</code>是块作用域。</li>\n<li><code>var</code>变量可以在其范围内更新和重新声明； <code>let</code>变量可以被更新但不能重新声明； <code>const</code>变量既不能更新也不能重新声明。</li>\n<li>它们都被提升到其作用域的顶端。但是，虽然使用变量<code>undefined</code>初始化了<code>var</code>变量，但未初始化<code>let</code>和<code>const</code>变量。</li>\n<li>尽管可以在不初始化的情况下声明<code>var</code>和<code>let</code>，但是在声明期间必须初始化<code>const</code>。</li>\n</ul>\n<p>暂时性死区：在块级顶部到变量正式申明这块区域去访问这个变量的话，直接报错</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错而不是到外部引用x</span>\n  \n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"六种数据类型\"><a href=\"#六种数据类型\" class=\"headerlink\" title=\"六种数据类型\"></a>六种数据类型</h3><p><code>String</code> <code>Number</code> <code>Boolean</code>  <code>Undefined</code> <code>Symbol</code> <code>Object</code> </p>\n<p><code>Object</code>为引用数据类型  </p>\n<ul>\n<li><p>Number</p>\n<p>均采用IEEE 754存储数字，会把能转换为整数的小数转换为整数。科学计数法：3.123e7等效于3.123*10^7</p>\n<p>八进制值用0o做前缀，十六进制0x前缀</p>\n<p>浮点值最高精度为1e-17，不宜用js做科学计算</p>\n<p><code>NaN</code>表示<code>Not a Number</code>，数据类型也是<code>Number</code>，有<code>Number.MIN_VALUE</code>&#x3D;5E-324，<code>Number.MAX_VALUE</code>&#x3D;1.797e308，还有正无穷 Infinity 和负无穷 -Infinity。函数 isFinite()可以判断数值是不是有限</p>\n<p>isNaN()函数可以判断所给参数是否能转换为数值，不能则返回 true</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">isNan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回false，因为能转化为数字</span>\n\nnum<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token comment\">//浮点数规整化，digits为小数点后保留位数</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//return the integer portion of a number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>即将支持的 BigInt 大数，在number字面量后加上 n 即可。可以表示任意大整数。</p>\n</li>\n<li><p><code>null</code>值用来表示一个为空的对象，<code>typeof null</code>时返回<code>object</code>类型。原则上 null 表示一个空指针</p>\n</li>\n<li><p>string：将其他数据类型转换为String类型：<code>toString</code>方法和<code>String</code>函数，前者不能转换null和undefined类型，后者可以，凡遇字母转换为<code>NaN</code>。  转换为Number类型：Number函数，针对字符串有<code>parseInt</code>和<code>parseFloat</code>，这两个函数遇到其他类型时会先将对象转换为字符串再进行转换。</p>\n<p>toString()方法在用于数值对象时可以接受参数，表示转换为不同进制的数字字符。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"10\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1010\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"10\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\" </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>用加号操作符给一个值加上一个空字符串””也可以将其转换为字符串</em></p>\n<ul>\n<li><p>&#96;&#96;反引号，不同于单引号’’和双引号””，可以包裹模板字符串，能够允许嵌入表达式的字符串字面量，嵌入${expression}即可</p>\n</li>\n<li><p>标签函数标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。 标签函数本身是一个常规函数，通过前缀到模板字面量来应用自定义行为。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">simpleTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>expressions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> expression <span class=\"token keyword\">of</span> expressions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">let</span> taggedResult <span class=\"token operator\">=</span> simpleTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> a <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> b <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> a <span class=\"token operator\">+</span> b <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [\"\", \" + \", \" = \", \"\"] 字符串数组</span>\n<span class=\"token comment\">// 6 </span>\n<span class=\"token comment\">// 9 </span>\n<span class=\"token comment\">// 15 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>taggedResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foobar\" </span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>用模板字面量也可以直接获取原始的模板字面量内容。在标签函数的第一个参数中，存在一个特殊的属性<code>raw</code>，其他地方无法对字符串数组使用。</p>\n</li>\n</ul>\n</li>\n<li><p>Symbol类型：唯一标识符，具有唯一性、隐藏性（用作对象属性名时无法通过object.key访问，而需要定制的object.getOwnPropertySymbols()方法得到对象中所有用作属性名的symbol）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> id1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> id2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">===</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\n<span class=\"token keyword\">let</span> id3 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">===</span>id3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\n<span class=\"token keyword\">let</span> id4  <span class=\"token operator\">=</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id3<span class=\"token operator\">===</span>id4<span class=\"token punctuation\">)</span><span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>全局注册并登记，使得相同参数注册的值symbol相等。前提是都通过for注册登记。</p>\n</li>\n</ul>\n<p>数字0，空字符串，NaN，空指针null，undefined都可以自动转化为false</p>\n<p>null 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 <strong>对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。</strong>因此，<strong>需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。</strong></p>\n<h2 id=\"基础语句\"><a href=\"#基础语句\" class=\"headerlink\" title=\"基础语句\"></a>基础语句</h2><p>==运算符会做强制类型转换\t===不会，单引号双引号和python一样，都可以用来包裹字符串，无区别。</p>\n<p>typeof 操作符，返回其后变量或字面量的类型</p>\n<p>+ 能做数字间的加减运算，当任一对象为字符串时会把另一参加运算对象转化为字符串再进行字符串拼接，参与运算对象为 object 或其他类型时会先转换为字符串再按如上规则运算</p>\n<ul>\n<li><p>try{}catch{}finally{}</p>\n<p>1.try中有return, 会先将值暂存，无论finally语句中对该值做什么处理，最终返回的都是try语句中的暂存值。</p>\n<p>2.当try与finally语句中均有return语句，会忽略try中return。</p>\n</li>\n</ul>\n<h3 id=\"空值合并运算符\"><a href=\"#空值合并运算符\" class=\"headerlink\" title=\"空值合并运算符\"></a>空值合并运算符</h3><p><strong>空值合并操作符</strong>（**<code>??</code>**）是一个逻辑操作符，当左侧的操作数为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> 时，返回其右侧操作数，否则返回左侧操作数。</p>\n<p>与[逻辑或操作符（<code>||</code>）不同，逻辑或操作符会在左侧操作数为<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\">假值</a>时返回右侧操作数。也就是说，如果使用 <code>||</code> 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，<code>&#39;&#39;</code> 或 <code>0</code>）时。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">'default string'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: \"default string\"</span>\n\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 0</span>\n\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>逻辑空赋值 ??&#x3D;</p>\n<p>x ??&#x3D; y ，x为null或undefined时才赋值为右值。</p>\n<h3 id=\"可选链操作符\"><a href=\"#可选链操作符\" class=\"headerlink\" title=\"可选链操作符\"></a>可选链操作符</h3><p>?.\tTS中遇到过</p>\n<p>判断是否为空</p>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><p>ES6 </p>\n<ul>\n<li><p>数组结构赋值：</p>\n<p>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>对象解构赋值：</p>\n<p>注意loc: { start }和loc: start是不一样的，前者把start也作为模式串，而后者只有loc是模式串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">loc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">line</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">column</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> loc<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> start <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> line <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\nline <span class=\"token comment\">// 1</span>\nloc  <span class=\"token comment\">// Object &#123;start: Object&#125;</span>\nstart <span class=\"token comment\">// Object &#123;line: 1, column: 5&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>默认值，生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nx <span class=\"token comment\">// 3var </span>\n\n<span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nx <span class=\"token comment\">// null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span> <span class=\"token operator\">:</span> first<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> last<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//index</span>\nfirst <span class=\"token comment\">// 1</span>\nlast <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 箭头函数\nforEach(() &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\nforEach((value) &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\nforEach((value, key) &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\nforEach((value, key, map) &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\n\n&#x2F;&#x2F; 回调函数\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n\n&#x2F;&#x2F; 内联回调函数\nforEach(function() &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value) &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value, key) &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value, key, map) &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value, key, map) &#123; &#x2F;* … *&#x2F; &#125;, thisArg)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Map和Set\"><a href=\"#Map和Set\" class=\"headerlink\" title=\"Map和Set\"></a>Map和Set</h2><ul>\n<li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li>\n<li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li>\n</ul>\n<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。重复值的元素会被略去。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Set.prototype.add(value)\n在Set对象尾部添加一个元素。返回该 Set 对象\n\nSet.prototype.delete(value)\n移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。\n\nSet.prototype.has(value)\n返回一个布尔值，表示该值在 Set 中存在与否。\n\nSet.prototype.clear()\n移除Set对象内的所有元素。\n\nSet.prototype.forEach(callbackFn[, thisArg])\n按照插入顺序，为 Set 对象中的每一个值调用一次 callBackFn。如果提供了thisArg参数，回调中的 this 会是这个参数。\n\nSet.prototype.values()\n返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>let newArray &#x3D; Array.from(set)，可以把括号内的对象转换为array并返回</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Map.prototype.size\n返回 Map 对象中的键值对数量。\n\nMap.prototype.get(key)\n返回与 key 关联的值，若不存在关联的值，则返回 undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，用来表明 Map 对象中是否存在与 key 关联的值。\n\nMap.prototype.set(key, value)\n在 Map 对象中设置与指定的键 key 关联的值 value，并返回 Map 对象。\n\nMap.prototype.delete(key)\n移除 Map 对象中指定的键值对，如果键值对存在并成功被移除，返回 true，否则返回 false。调用 delete 后再调用 Map.prototype.has(key) 将返回 false。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h3><p><strong><code>WeakMap</code></strong> 对象是一组键&#x2F;值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</p>\n<p>map API <em>可以</em> 通过使其四个 API 方法共用两个数组（一个存放键，一个存放值）来实现。给这种 map 设置值时会同时将键和值添加到这两个数组的末尾。从而使得键和值的索引在两个数组中相对应。当从该 map 取值的时候，需要遍历所有的键，然后使用索引从存储值的数组中检索出相应的值。</p>\n<p>但是存在两个缺点：</p>\n<ol>\n<li>首先赋值和搜索操作都是 <em>O(*n</em>)* 的时间复杂度（<em>n</em> 是键值对的个数），因为这两个操作都需要遍历全部整个数组来进行匹配。</li>\n<li>另外一个缺点是可能会导致内存泄漏，因为数组会一直引用着每个键和值。这种引用使得垃圾回收算法不能回收处理他们，即使没有其他任何引用存在了。</li>\n</ol>\n<p>相比之下，原生的 <code>WeakMap</code> 持有的是每个键对象的“弱引用”，这意味着在没有其他引用存在时垃圾回收能正确进行。原生 <code>WeakMap</code> 的结构是特殊且有效的，其用于映射的 key _只有_在其没有被回收时才是有效的。</p>\n<p><strong>正由于这样的弱引用，<code>WeakMap</code> 的 key 是不可枚举的</strong>（没有方法能给出所有的 key）。如果 key 是可枚举的话，其列表将会受垃圾回收机制的影响，从而得到不确定的结果。因此，如果你想要这种类型对象的 key 值的列表，你应该使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>。</p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete\"><code>WeakMap.prototype.delete(key)</code></a></p>\n<p>删除 WeakMap 中与 <code>key</code> 相关联的值。删除之后， <code>WeakMap.prototype.has(key)</code> 将会返回 <code>false</code>。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\"><code>WeakMap.prototype.get(key)</code></a></p>\n<p>返回 WeakMap 中与 <code>key</code> 相关联的值，如果 <code>key</code> 不存在则返回 <code>undefined</code>。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\"><code>WeakMap.prototype.has(key)</code></a></p>\n<p>返回一个布尔值，断言一个值是否已经与 <code>WeakMap</code> 对象中的 <code>key</code> 关联。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\"><code>WeakMap.prototype.set(key, value)</code></a></p>\n<p>给 <code>WeakMap</code> 中的 <code>key</code> 设置一个 <code>value</code>。该方法返回一个 <code>WeakMap</code> 对象。</p>\n</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pop()删除末尾元素 ，返回移除的数组元素；\npush(ele)末尾添加元素 ele，返回添加后数组的长度；\nshift()删除首元素并移动数组位置 ，返回添加后数组的长度；\nunshift(ele)在数组首位置添加元素ele，返回添加后数组的长度；\n\nshift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。\n\nunshift方法\nunshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度（该方法修改原有数组）\narr.unshift(element1, ..., elementN)\n返回其 length 属性值\n\nArray.isArray(val):判断val是不是数组\n\nArray.prototype 属性表示 Array 构造函数的原型，并允许向所有Array对象添加新的属性和方法。或者说，允许利用prototype向任何对象添加属性和方法，从而应用到对象的所有实例上<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"遍历操作\"><a href=\"#遍历操作\" class=\"headerlink\" title=\"遍历操作\"></a>遍历操作</h3><p>最常用for (var i &#x3D; 0; i &lt; a.length; i++) {<br>    &#x2F;&#x2F; Do something with a[i]<br>}</p>\n<p>for (. of array)：for (const currentValue of a)  {&#x2F;&#x2F; Do something with currentValue}</p>\n<p>for(. in array)：for (var i in a) {&#x2F;&#x2F; 操作 a[i]}遍历索引，如果直接向 Array.prototype 添加了新的属性，使用这样的循环这些属性也同样会被遍历。不推荐这个循环</p>\n<p>forEach()：<br>array.forEach(function(currentValue, index, array) {&#x2F;&#x2F; 操作 currentValue 或者 array[index]});</p>\n<p>注: forEach() 对于空数组是不会执行回调函数的。</p>\n<h3 id=\"Array-prototype-at\"><a href=\"#Array-prototype-at\" class=\"headerlink\" title=\"Array.prototype.at()\"></a><a href=\"https://link.segmentfault.com/?enc=gIfegOUoZxxLBOg/nmpAvw==.it+TiWVsG0Y95ewedhlKoMS2CPXZSbhECA0MBePgVHbbS3pnn4r95vxFQo8Wnk+rFcIZQbnMXjwFeEBW9uTMx/mnhkJ0ck8W/V9MIZGB4SZb5GqmV1RLVPtXvNkMw7kq\">Array.prototype.at()</a></h3><ul>\n<li>返回at中参数指向的index的数组元素，支持负数</li>\n</ul>\n<h3 id=\"array-prototype-concat\"><a href=\"#array-prototype-concat\" class=\"headerlink\" title=\"array.prototype.concat()\"></a>array.prototype.concat()</h3><p>拼接两个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value0<span class=\"token punctuation\">)</span>\n<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value0<span class=\"token punctuation\">,</span> value1<span class=\"token punctuation\">)</span>\n<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value0<span class=\"token punctuation\">,</span> value1<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* … ,*/</span> valueN<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>valueN</code> 可选</p>\n<p>数组和&#x2F;或值，将被合并到一个新的数组中。如果省略了所有 <code>valueN</code> 参数，则 <code>concat</code> 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。</p>\n<h3 id=\"array-indexOf\"><a href=\"#array-indexOf\" class=\"headerlink\" title=\"array.indexOf\"></a>array.indexOf</h3><ul>\n<li>判断数组中是否存在某个值，如果存在返回数组元素的下标，否则返回-1</li>\n</ul>\n<h3 id=\"array-includes-searchElement-fromIndex\"><a href=\"#array-includes-searchElement-fromIndex\" class=\"headerlink\" title=\"array.includes(searchElement[, fromIndex])\"></a>array.includes(searchElement[, fromIndex])</h3><ul>\n<li>判断一个数组是否包含一个指定的值，如果存在返回 true，否则返回false。</li>\n</ul>\n<h3 id=\"reduce-方法\"><a href=\"#reduce-方法\" class=\"headerlink\" title=\"reduce()方法\"></a>reduce()方法</h3><p><strong><code>reduce()</code></strong> 方法对数组中的每个元素按序执行一个由您提供的 <strong>reducer</strong> 函数，每一次运行 <strong>reducer</strong> 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token parameter\">total<span class=\"token punctuation\">,</span>\n\t\tcurrentValue<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span>initialValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>reduce() 方法接收一个回调函数作为参数，reduce 为数组中的每一个元素依次执行回调函数，回调函数接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。<br>reduce方法的返回值为回调函数最后的返回值。</p>\n<p>如果没有提供initialValue，那么reduce的第一轮回调函数中的“total”就arr[0]，“current_Value”就是arr[1]，index就是1；</p>\n<p>如果提供initialValue，那么reduce的第一轮回调函数中的“total”就是initialValue，“current_Value”就是arr[0]，index就是0。</p>\n<p>所以在使用reduce函数时，回调函数中return最好不要省，而且initialValue也最好不要省！！！</p>\n<h3 id=\"filter-方法\"><a href=\"#filter-方法\" class=\"headerlink\" title=\"filter() 方法\"></a>filter() 方法</h3><p>返回一个新数组，其包含通过所提供函数实现的测试的所有元素。 </p>\n<p>var newArray &#x3D; arr.filter(callback(element[, index[, array]])[, thisArg])</p>\n<p>上式中 element 必需，后三者都可选，但没传 index 则 array 也不能传</p>\n<p>注：当所过滤的数组是对象数组的情况时，对新返回的数组元素属性做出修改，同时对原数组也会造成影响；当过滤数组为纯数组时，修改不会改变原数组。也就是浅拷贝</p>\n<h3 id=\"from方法\"><a href=\"#from方法\" class=\"headerlink\" title=\"from方法\"></a>from方法</h3><p>Array.from(arrayLike[, mapFn[, thisArg]])参数分别为伪数组对象或可迭代对象，新数组中的每个元素会执行的回调函数，执行回调函数 mapFn 时 this 对象<br>返回一个新的数组实例。</p>\n<p>Array.from(arrayLike[, mapFunction[, thisArg]])：arrayLike：必传参数，想要转换成数组的伪数组对象或可迭代对象。<br>mapFunction：可选参数，mapFunction(item，index){…} 是在集合中的每个项目上调用的函数。返回的值将插入到新集合中。<br>thisArg：可选参数，执行回调函数 mapFunction 时 this 对象。这个参数很少使用。</p>\n<h3 id=\"array-map-方法\"><a href=\"#array-map-方法\" class=\"headerlink\" title=\"array.map() 方法\"></a>array.map() 方法</h3><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值，按照原始数组元素顺序依次处理元素。<br>array_back&#x3D;array.map(function(currentValue,index,arr), thisValue)</p>\n<p>注：map()方法不会对空数组进行检测；也不会改变原数组</p>\n<p>eg.\tlet arr &#x3D; new Array( 2 ).fill( 0 ).map( _ &#x3D;&gt; new Array( 3 ) ); &#x2F;&#x2F;作用类似C语言：int arr[2][3]</p>\n<h3 id=\"arr-slice-begin-end\"><a href=\"#arr-slice-begin-end\" class=\"headerlink\" title=\"arr.slice([begin[, end]])\"></a>arr.slice([begin[, end]])</h3><ul>\n<li><code>begin</code> 可选，可为负。如果 <code>begin</code> 大于<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>长度，返回空数组。slice(-1) 提取最后一个元素，slice(-2)提取最后两个元素，依次类推。前包后不包。<br><a href=\"https://so.csdn.net/so/search?q=slice&spm=1001.2101.3001.7020\">slice</a>() 返回整个数组。</li>\n</ul>\n<h3 id=\"array-splice-start-deleteCount-item1-item2-…\"><a href=\"#array-splice-start-deleteCount-item1-item2-…\" class=\"headerlink\" title=\"array.splice(start[, deleteCount[, item1[, item2[, …]]]])\"></a>array.splice(start[, deleteCount[, item1[, item2[, …]]]])</h3><ul>\n<li>start 指定修改的开始位置（从 0 计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从 -1 计数，这意味着 -n 是倒数第 n 个元素并且等价于 <code>array.length-n</code>）；如果负数的绝对值大于数组的长度，则表示开始位置为第 0 位。</li>\n<li>deleteCount :整数，表示要移除的数组元素的个数。如果 <code>deleteCount</code> 大于 <code>start</code> 之后的元素的总数，则从 <code>start</code> 后面的元素都将被删除（含第 <code>start</code> 位）。如果 <code>deleteCount</code> 被省略了，或者它的值大于等于<code>array.length - start</code>(也就是说，如果它大于或者等于<code>start</code>之后的所有元素的数量)，那么<code>start</code>之后数组的所有元素都会被删除。如果 <code>deleteCount</code> 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</li>\n<li>item:从start位置要添加进数组的元素，不指定时 splice 将只删除元素。</li>\n</ul>\n<p>返回被删除的元素</p>\n<h3 id=\"arr-sort-compareFn\"><a href=\"#arr-sort-compareFn\" class=\"headerlink\" title=\"arr.sort([compareFn])\"></a>arr.sort([compareFn])</h3><p>如果没有指明 <code>compareFn</code> ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 <code>compareFn</code>），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。</p>\n<ul>\n<li>如果 <code>compareFn(a, b)</code> 大于 0 ， b 会被排列到 a 之前。</li>\n<li>如果 <code>compareFn(a, b)</code> 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 <code>compareFn(a, b)</code> 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li><code>compareFn(a, b)</code> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</li>\n</ul>\n<h3 id=\"strArr-join-separator\"><a href=\"#strArr-join-separator\" class=\"headerlink\" title=\"strArr.join(separator)\"></a>strArr.join(separator)</h3><ul>\n<li>用输入参数分隔输入字符串数组的每个元素，返回新字符串</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>可以直接用比较符号比较字符串</p>\n<h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><p>escape-unescape方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . &#x2F; 。其他所有的字符都会被转义序列替换。</p>\n<p>encodeURI-decodeURI对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的： , &#x2F; ? : @ &amp; &#x3D; + $ # </p>\n<p>encodeURIComponent-decodeURIComponent该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ‘ ( ) 。其他字符（比如 ：;&#x2F;?:@&amp;&#x3D;+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</p>\n<p><strong>1、如果只是<a href=\"https://www.zhihu.com/search?q=%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E4%B8%B2&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:20300871%7D\">编码字符串</a>，不和URL有半毛钱关系，那么用escape。</strong></p>\n<p><strong>2、如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。</strong></p>\n<p>比如</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.cnblogs.com/season-huang/some other thing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编码后会变为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"http://www.cnblogs.com/season-huang/some%20other%20thing\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看到了区别吗，连 “&#x2F;“ 都被编码了，整个URL已经没法用了。</p>\n<p><strong>3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</strong></p>\n<h3 id=\"String-prototype-charAt-index\"><a href=\"#String-prototype-charAt-index\" class=\"headerlink\" title=\"String.prototype.charAt(index)\"></a>String.prototype.charAt(index)</h3><p>指定 <code>index</code> 处字符，参数不在 0 和字符串的 length-1 之间，则返回空字符串</p>\n<h3 id=\"String-prototype-charCodeAt-index\"><a href=\"#String-prototype-charCodeAt-index\" class=\"headerlink\" title=\"String.prototype.charCodeAt(index)\"></a>String.prototype.charCodeAt(index)</h3><p>index：一个大于等于 <code>0</code>，小于字符串长度的整数。如果不是一个数值，则默认为 <code>0</code>。</p>\n<p>返回值：指定 <code>index</code> 处字符的 UTF-16 代码单元值的一个数字；如果 <code>index</code> 超出范围，<code>charCodeAt()</code> 返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>。</p>\n<p>如果指定的 <code>index</code> 小于 <code>0</code> 、等于或大于字符串的长度，则 <code>charCodeAt</code> 返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>。</p>\n<h3 id=\"String-fromCharCode\"><a href=\"#String-fromCharCode\" class=\"headerlink\" title=\"String.fromCharCode()\"></a>String.fromCharCode()</h3><p>静态 <strong><code>String.fromCharCode()</code></strong> 方法返回由指定的 UTF-16 代码单元序列创建的字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"indexOf-和-lastIndexOf\"><a href=\"#indexOf-和-lastIndexOf\" class=\"headerlink\" title=\"indexOf() 和 lastIndexOf()\"></a>indexOf() 和 lastIndexOf()</h3><p>使用字符串的 indexOf() 和 lastIndexOf() 方法，可以根据参数字符串，返回指定子字符串的下标位置。这两个方法都有两个参数，说明如下。</p>\n<ul>\n<li>第一个参数为一个子字符串，指定要查找的目标。</li>\n<li>第二个参数为一个整数，指定查找的起始位置，取值范围是 0~length-1。</li>\n</ul>\n<p>对于第二个参数来说，需要注意一下几个特殊情况。</p>\n<ul>\n<li>如果值为负数，则视为 0，相当于从第一个字符开始查找。</li>\n<li>如果省略了这个参数，也将从字符串的第一个字符开始查找。</li>\n<li>如果值大于等于 length 属性值，则视为当前字符串中没有指定的子字符串，返回 -1。</li>\n</ul>\n<h3 id=\"str-match-reg\"><a href=\"#str-match-reg\" class=\"headerlink\" title=\"str.match(reg)\"></a>str.match(reg)</h3><p>&#x2F;.&#x2F;g</p>\n<p>方法对字符串对象进行检索,返回包含所有匹配结果的数组。而 正则表达式 &#x2F;.&#x2F;g 匹配的是所有的字符， 所以str.match(&#x2F;.&#x2F;g)返回的是由字符串str中所有的字符组成的数组，以此达到将字符串转换为数组的目的。 </p>\n<h3 id=\"str-replace-pattern-replacement\"><a href=\"#str-replace-pattern-replacement\" class=\"headerlink\" title=\"str.replace(pattern, replacement)\"></a>str.replace(pattern, replacement)</h3><p>两个参数均为字符串，寻找到模式串替换为后者。</p>\n<h3 id=\"str-search-regexp\"><a href=\"#str-search-regexp\" class=\"headerlink\" title=\"str.search(regexp)\"></a>str.search(regexp)</h3><p>返回 str 中给定正则表达式对应索引</p>\n<h3 id=\"str-slice-a-b\"><a href=\"#str-slice-a-b\" class=\"headerlink\" title=\"str.slice(a,b)\"></a>str.slice(a,b)</h3><p>前包后不包；截取出来的字符串的长度为第二个参数与第一个参数之间的差；若参数值为负数,则将该值加上字符串长度后转为正值；若第一个参数等于大于第二个参数,则返回空字符串.</p>\n<h3 id=\"str-substring-a-b\"><a href=\"#str-substring-a-b\" class=\"headerlink\" title=\"str.substring(a,b)\"></a>str.substring(a,b)</h3><p>前包后不包；若参数值为负数,则将该值转为0;两个参数中,取较小值作为开始位置,截取出来的字符串的长度为较大值与较小值之间的差.</p>\n<h3 id=\"str-split-separator\"><a href=\"#str-split-separator\" class=\"headerlink\" title=\"str.split(separator)\"></a>str.split(separator)</h3><p>分割字符串，返回字符数组</p>\n<h3 id=\"str-substr-a-length\"><a href=\"#str-substr-a-length\" class=\"headerlink\" title=\"str.substr(a,length)\"></a>str.substr(a,length)</h3><p>第一个参数代表开始位置,第二个参数代表截取的长度</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"基础-1\"><a href=\"#基础-1\" class=\"headerlink\" title=\"基础\"></a>基础</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">avg</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span><span class=\"token keyword\">function</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//js创建函数有两种：一是函数声明function fnName () &#123;…&#125;;，二是函数表达式var fnName = function () &#123;…&#125;;前者因 js 具有 函数声明提升 所以定义在任何位置均可成功调用，而后者必须等到定义语句被解释后才能正常调用(与 var 的变量定义提升不同)</span>\n<span class=\"token comment\">//还有一种匿名函数：function () &#123;…&#125;; 使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数，匿名函数属于函数表达式，匿名函数有很多作用，赋予一个变量则创建函数，赋予一个事件则成为事件处理程序或创建闭包等等。</span>\n函数表达式后面可以加括号立即调用该函数，<span class=\"token operator\">*</span><span class=\"token function\">函数声明不可以，只能以fnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>形式调用<span class=\"token operator\">*</span> 存疑，在控制台中调用成功。是因为在函数定义前面加了运算符，比如用括号包裹，把它也转换为了表达式。\n<span class=\"token function\">总结一下就是当把函数定义为表达式时总能在后面加上括号来立即调用。</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">a</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  三者均能立即调用。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由 <code>Function</code> 构造函数创建的函数不会创建当前环境的闭包，它们总是被创建于全局环境，因此在运行时它们只能访问全局变量和自己的局部变量，不能访问它们被 <code>Function</code> 构造函数创建时所在的作用域的变量。这一点与使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> 执行创建函数的代码不同。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, not 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">8</span>\nlet ans<span class=\"token operator\">=</span>x <span class=\"token operator\">=</span><span class=\"token operator\">></span> x<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>js的&#x3D;&gt;符号类似于lambda</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x3D;&gt;是es6中的arrow function语法\n(x) &#x3D;&gt; x + 6\n相当于\nfunction(x)&#123;return x + 6;&#125;;\n\nconst funcname&#x3D;(args)&#x3D;&gt;&#123;...&#125;\t\t函数调用：funcname(args)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>eval()函数，参数是一个字符串。如果字符串表示的是表达式，<code>eval()</code> 会对表达式进行求值。如果参数表示一个或多个 JavaScript 语句，那么<code>eval()</code> 就会执行这些语句。如果 <code>eval()</code> 的参数不是字符串， <code>eval()</code> 会将参数原封不动地返回。</p>\n<p>永远不要使用eval()</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>嵌套函数可以访问父函数作用域中的变量，可以利用这个特性减少全局变量的数量，有效地防止“污染”你的全局命名空间——你可以称它为“局部全局（local global）”。换种思路，把全局当作整体函数，那么就能形成作用域链(scope chain)，嵌套者能访问被嵌套者的变量，反之则不行，寻找变量的定义时总是从当前嵌套层或者说从金字塔的当前区域往外(往下)寻找，就近选择。需要注意的是每个函数的金字塔是不同的，在该函数被定义的时候就已经确定了，所以当在函数内部调用之前已定义的函数时，应当回到那个函数的“金字塔”寻找其所需要的变量，当前函数的作用域不会与产生交集。</p>\n<p>头等函数(first-class functions)，可以当作参数被传递的函数。回调函数(callback)是被作为参数传递的函数，注意是函数作为参数，而非函数返回值作为参数，与其对应的是高阶函数，是使用回调函数的函数。</p>\n<p>回调机制包括三方：起始函数，中间函数，回调函数；起始函数调用中间函数，把回调函数作为参数传递给中间函数。起始函数一般是当前运行的主函数，一般隐藏忽略，主要关注回调函数和把回调函数作为参数的中间函数。</p>\n<p>回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。</p>\n<h3 id=\"call、apply和bind\"><a href=\"#call、apply和bind\" class=\"headerlink\" title=\"call、apply和bind\"></a>call、apply和bind</h3><p><code>myfunc(...args)&lt;=&gt;myfunc.apply(null,args)</code>展开语法将数组展开为数组元素。<strong>剩余参数</strong>语法允许我们将一个不定数量的参数表示为一个数组，与展开语法恰恰相反，形式为定义函数时<code>function fun1(...theArgs)&#123;alert(theArgs.length);&#125;</code>。剩余参数也可以被解构为包含变量，形式为<code>function f(...[a, b, c]) &#123;return a + b + c;&#125;</code>. </p>\n<p><code>apply()</code> 的第一个参数应该是一个被当作 <code>this</code> 来看待的对象。于是这里是全局对象。</p>\n<p><code>apply()</code> 有一个姐妹函数，名叫 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>，它也可以允许你设置 <code>this</code>，但它带有一个扩展的参数列表而不是一个数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>thisArg是函数执行时的 this 对象。call 实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 判断调用对象</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断 context 是否传入，如果没有传就设置为 window</span>\n    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span>\n\targs <span class=\"token operator\">=</span> args <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//通过隐式绑定的方式调用函数</span>\n    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除手动增加的属性方法</span>\n    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将执行结果返回</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类似的apply实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    args <span class=\"token operator\">=</span> args <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>bind先返回一个绑定了this的函数，再次执行则在this中执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D;&#123;\n\tname : &quot;Cherry&quot;,\n\tfn : function (a,b) &#123;\n\t\tconsole.log( a + b)\n\t&#125;\n&#125;\n\nvar b &#x3D; a.fn;\nb.bind(a,1,2)()           &#x2F;&#x2F; 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bind利用apply实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    args <span class=\"token operator\">=</span> args <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">newFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>newFnArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">newFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newFnArgs<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>newFnArgs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h3><p>将接受 <strong>n 个参数的 1 个函数改为只接受一个参数的 n 个互相嵌套的函数</strong>，当前置部分参数一致时，可以通过固定前置参数生成指定函数，简化代码。</p>\n<p>对应偏函数是柯里化的宽松情况，不一定需要每一层都只固定一个参数，继承思想即可。</p>\n<h3 id=\"函数参数的传递\"><a href=\"#函数参数的传递\" class=\"headerlink\" title=\"函数参数的传递\"></a>函数参数的传递</h3><p>有值传递和引用传递，基本类型传递值，引用类型(对象)传递对象的地址，如果在函数中对对象重新赋值，则传递进来的地址改变，即在堆中重新分配一段空间，改变传递进来地址的值指向这个新的地址，不影响原对象。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function changeAgeAndReference(person) &#123;\n    person.age &#x3D; 25;\n    person &#x3D; &#123;\n        name: &quot;John&quot;,\n        age: 50\n    &#125;;\n\n    return person;\n&#125;\nvar personObj1 &#x3D; &#123;\n    name: &quot;Alex&quot;,\n    age: 30\n&#125;;\nvar personObj2 &#x3D; changeAgeAndReference(personObj1);\nconsole.log(personObj1); &#x2F;&#x2F; -&gt; &#123;name: &#39;Alex&#39;, age: 25&#125;\nconsole.log(personObj2); &#x2F;&#x2F; -&gt; &#123;name: &#39;John&#39;, age: 50&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对对象的重新赋值在任何地方都是如此：在动态堆中重新分配内存空间并赋值，再把原地址的值改为新对象的地址。</p>\n<p>当一个对象没有对应地址指向时，也就是上一段中原对象的情况，这个对象的内存地址会被回收，这是js的垃圾回收机制</p>\n<p>“如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。这就要求实时查看内存占用。”避免内存泄漏的要点在于往后不会使用的变量要及时赋空。</p>\n<h2 id=\"闭包、词法环境-作用域\"><a href=\"#闭包、词法环境-作用域\" class=\"headerlink\" title=\"闭包、词法环境(作用域)\"></a>闭包、词法环境(作用域)</h2><p>一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。</p>\n<ul>\n<li>用于保存私有属性：将不需要对外暴露的属性、函数保存在闭包函数的父函数里，避免外部操作对值的干扰</li>\n<li>避免局部属性污染全局变量空间导致的命名空间混乱</li>\n<li>模块化封装，将对立的功能模块通过闭包进去封装，只暴露较少的 API 供外部应用使用</li>\n</ul>\n<p>缺点：内存消耗，由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。</p>\n<p>c语言退出函数时局部变量也会退出其作用域，所以难以创建闭包；js创建函数时会保留其能访问的变量的地址，这也是创建闭包的前提所在。</p>\n<p>词法环境有两大成员：<strong>「Environment Record（环境记录）」</strong>，可能为 null 的 <strong>「Outer Lexical Environment（外部词法环境引用）」</strong>。<strong>任何在环境记录中的标识符都可以在当前词法环境直接以标识符形式访问</strong>。</p>\n<p>Environment Record 是一个抽象类，存在三个具体的子类，<strong>「Declarative Environment Record」</strong> ，<strong>「Object Environment Record」</strong>，<strong>「Global Environment Record（全局环境记录）」</strong></p>\n<p>声明式环境记录保存 let、const、function 等非 var 声明标识符，对象式环境记录保存 var 声明标识符。 </p>\n<h3 id=\"对象式环境记录\"><a href=\"#对象式环境记录\" class=\"headerlink\" title=\"对象式环境记录\"></a>对象式环境记录</h3><p>对象式记录也是用于记录标识符与变量的映射，但是它只记录var声明的标识符 ； 并且它有一个关联的绑定对象(binding object)。</p>\n<ul>\n<li><p>在词法环境中，会为对象式环境记录中所有的标识符绑定到绑定对象的同名属性上。<br>例如var number&#x3D;1000; , 也能够通过window.number形式获取到number的值。</p>\n</li>\n<li><p>反过来也可以，会将绑定对象的所有属性名（自然也必须是能做标识符的）绑定到对象式环境记录中的同名标识符上。<br>例如：window.thousand &#x3D; 1000; 然后直接以 thousand就能获取到该值（严格模式下报错）</p>\n</li>\n<li><p>每个标识符在绑定后都会直接实例化并初始化为undefined ，如果标识符已经绑定了绑定对象上的原有属性上，那么该变量就是对应属性值 。<br>比如之前的isNaN在声明前使用时就有值，就是这个原因。<br>变量提升也是这个原因造成的。</p>\n</li>\n<li><p>如果标识符已经存在，那么无视之，所以var可以重复声明。</p>\n</li>\n</ul>\n<h3 id=\"声明式环境记录\"><a href=\"#声明式环境记录\" class=\"headerlink\" title=\"声明式环境记录\"></a>声明式环境记录</h3><p>同样的，声明式环境记录也比较特殊，它只记录非var声明的标识符，例如let、const、function……声明的标识符等等。并且它没有关联的绑定对象。</p>\n<ul>\n<li><p>所有声明的标识符（这里应该包含var声明的标识符，但不建立关联）都位于此处。</p>\n</li>\n<li><p>将所有非var声明的标识符实例化，但不初始化，也就是变量处于uninitialized状态。也就是说内存中已经为变量预留出空间，但是还没有和对应的标识符建立绑定关系。</p>\n</li>\n<li><p>在执行上下文的运行（perform状态）阶段，并执行到声明语句时，才会真正初始化并默认赋值为undefined。<br>所以你就懂了，let声明的标识符之前无法访问，就是因为还没有建立绑定。<br>暂存死区的根本原因在此。</p>\n</li>\n<li><p>在声明式环境记录中，<strong>不允许出现重复的标识符</strong>，所以它无法重复。甚至和var声明的标识符冲突。注意，它会在代码加载后的预编译阶段（只能说是运行前，因为JS没有真正的预编译啊……）就已经完成。</p>\n</li>\n</ul>\n<p>全局环境记录包含前两者，是底层记录形式，绑定对象为 window 。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> mul <span class=\"token operator\">=</span> a<span class=\"token operator\">*</span>b <span class=\"token operator\">+</span>sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span>  mul<span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6500</span>\n\n\n<span class=\"token comment\">//词法环境</span>\nFunctionEnv <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">This</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>window<span class=\"token operator\">></span>\n    <span class=\"token literal-property property\">outerEnv</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>GlobalEnv<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ObjRec</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">t</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">mul</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">650</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">DecRec</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBlockEnv<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">This</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>window<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">outerEnv</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>FunctionEnv<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">DecRec</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">50</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>函数属于声明式环境记录是因为存在块级作用域，var 剥离出的环境记录只有全局作用域和函数作用域。</p>\n<p>声明式对应 LexEnv，对象式对应 VarEnv</p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>this和new</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">this 使用在函数中时被用来指向当前调用函数的对象，也即在对象上使用. or [] 访问属性或者方法时，this就相当于这个对象，如果没有. or []依附对象进行直接访问时，this将指向全局对象（global object），也即访问全局属性&#x2F;变量或者方法&#x2F;函数。\nGlobal execution context in scripts:this指全局对象-一个名字叫global的对象\nGlobal execution context in modules：this返回undefined\n\n\nnew 创建一个崭新的空对象，然后使用指向那个对象的 this 调用特定的函数，修改this对象的属性。如果你没有使用 new 运算符，构造函数会像其他的常规函数一样被调用，并不会创建一个对象。在这种情况下，this 的指向也是不一样的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>for … in object 可以遍历对象的所有属性，利用全局对象Object的方法keys可以获得属性名数组，例如有对象实例student，Object.keys(student)为student的所有属性名数组。判断对象是否包含某一属性可以用 in ，’keyName’ in objectName 是bool值。当通过类实例化时，虽然方法可以访问，in也报true，但方法不属于对象本身，而是属于类。</p>\n<p>const objectName&#x3D;{}，引用关系不可变，但引用内容可变，意思是仍然可以为对象分配属性。</p>\n<p>类也是对象。js引擎会自动把常量包装成对象，以能使用对应的对象方法。如length等。</p>\n<p>ES6中在对象中添加方法时可以不写key而是直接像下面这样</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">objectName&#123;\n...\n\tfuncName(args...)&#123;\n\t...\n\t&#125;\n...\n&#125;;\n\nsame as\n\nobjectName&#123;\n...\n\tfuncName:function(args...)&#123;\n\t...\n\t&#125;\n...\n&#125;;\n\nλ-calculus<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>以下写法在ES6中合法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let obj&#x3D;&#123;\n\tname:&quot;hh&quot;,\n\tage:&quot;13&quot;\n&#125;\n\nlet &#123;name,age&#125;&#x3D;obj;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><code>Object.defineProperty(object, property, methods)</code>\t</p>\n<p>第一个参数是一个对象，第二个参数是给该对象设置的属性名称，第三个参数是配置该属性的方法，比如set&#x2F;get方法</p>\n<p>在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<h2 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h2><p>防抖：多次连续触发只执行一次</p>\n<p>节流：一段时间内连续触发只执行一次，冷却时间过了可以继续</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;div id&#x3D;&quot;content&quot; \n         style&#x3D;&quot;height:150px;\n                line-height:150px;\n                text-align:center; \n                color: #fff;background-color:black;\n                font-size:80px;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n \n&lt;script&gt;\n    let num &#x3D; 1;\n    const content &#x3D; document.getElementById(&#39;content&#39;);\n    function count() &#123;\n        content.innerHTML &#x3D; num++;\n    &#125;;\n    content.onmousemove &#x3D; count;\n\t&#x2F;&#x2F;防抖 非立即执行版\n\tfunction debunce(func,wait,...args)&#123;\n        let timeout;\n        return function()&#123;\n            const context &#x3D; this;\n            if(timeout) clearTimeout(timeout);\n            timeout &#x3D; setTimeout(()&#x3D;&gt;&#123;\n                func.apply(context,args);\n            &#125;,wait);\n        &#125;\n    &#125;\n    &#x2F;&#x2F;防抖 立即执行\n    function debunce(func,wait,...args)&#123;\n        let timeout;\n        return function()&#123;\n            const context &#x3D; this;\n            let callNow &#x3D; !timeout;\n            if(timeout) clearTimeout(timeout);\n            timeout &#x3D; setTimeout(()&#x3D;&gt;&#123;\n                timeout &#x3D; null;\n            &#125;,wait)\n            if(callNow) func.apply(context,args);\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F;节流 时间戳立即执行\n    function throttle(func,wait,...args)&#123;\n        let pre&#x3D;0;\n        return function()&#123;\n            const context &#x3D; this;\n            let now &#x3D; Date.now();\n            if(now-pre&gt;&#x3D;wait)&#123;\n                func.apply(context,args);\n                pre&#x3D;Date.now();\n            &#125;\n        &#125;\n    &#125;\n    &#x2F;&#x2F;节流 延时器延迟执行\n    function throttle(func,wait,...args)&#123;\n        let timeout&#x3D;0;\n        return function()&#123;\n            const context &#x3D; this;\n            if(!timeout)&#123;\n                timeout&#x3D;setTimeout(()&#x3D;&gt;&#123;\n                    timeout&#x3D;null;\n                    func.apply(context,args);\n                &#125;,wait);\n            &#125;\n        &#125;\n    &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"异步和同步\"><a href=\"#异步和同步\" class=\"headerlink\" title=\"异步和同步\"></a>异步和同步</h2><p>异步任务分为宏任务和微任务</p>\n<p><strong>宏任务：</strong>script&#x2F;外层同步代码，定时器<code>setTimeout</code>，<code>setInterval</code>，node中的setImmediate，<code>事件绑定</code>，<code>回调函数</code>，<code>node中的fs模块</code></p>\n<p><strong>微任务：</strong><code>new Promise().then(回调)</code>，<code>process.nextTick()</code>，<code>async await</code>,<code>Object.observe</code>,<code>MutaionObserver</code></p>\n<p>Event Loop的执行顺序是：</p>\n<ol>\n<li>首先执行执行栈里的任务。</li>\n<li>执行栈清空后，检查微任务（microtask）队列，将可执行的微任务全部执行。</li>\n<li>取宏任务（macrotask）队列中的第一项执行。</li>\n<li>回到第二步。</li>\n</ol>\n<p>await后面的函数会先执行一遍，然后就会跳出整个async函数来执行后面js栈（后面会详述）的代码。等本轮事件循环执行完了之后又会跳回到async函数中等待await后面表达式的返回值。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&quot;script start&quot;);\n\nasync function async1() &#123;\n  await async2();\n  console.log(&quot;async1 end&quot;);\n&#125;\n\nasync function async2() &#123;\n  console.log(&quot;async2 end&quot;);\n&#125;\n\nasync1();\n\nsetTimeout(function () &#123;\n  console.log(&quot;setTimeout&quot;);\n&#125;, 0);\n\nnew Promise((resolve) &#x3D;&gt; &#123;\n  console.log(&quot;Promise&quot;);\n  resolve();\n&#125;)\n  .then(function () &#123;\n    console.log(&quot;promise1&quot;);\n  &#125;)\n  .then(function () &#123;\n    console.log(&quot;promise2&quot;);\n  &#125;);\n\nconsole.log(&quot;script end&quot;);\n&#x2F;&#x2F; script start &#x3D;&gt; async2 end &#x3D;&gt; Promise &#x3D;&gt; script end &#x3D;&gt; async1 end&#x3D;&gt; promise1 &#x3D;&gt; promise2 &#x3D;&gt; setTimeout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Promise</p>\n<p>第一段调用了Promise构造函数，第二段是调用了promise实例的.then方法。promise的构造函数是同步执行，promise.then中的函数是异步执行。</p>\n<p>promise实例有三种状态：</p>\n<ul>\n<li>pending（待定）</li>\n<li>fulfilled（已执行）&#x2F;或者也可形象地叫做resolved</li>\n<li>rejected（已拒绝）</li>\n</ul>\n<p>调用resolve和reject能将分别将promise实例的状态变成fulfilled和rejected，只有状态变成已完成（即fulfilled和rejected之一），才能触发状态的回调</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 做一些事情\n  &#x2F;&#x2F; 然后在某些条件下resolve，或者reject\n  if (&#x2F;* 条件随便写^_^ *&#x2F;) &#123;\n    resolve()\n  &#125; else &#123;\n    reject()\n  &#125;\n&#125;)\n\np.then(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 如果p的状态被resolve了，就进入这里\n&#125;, () &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 如果p的状态被reject\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><p>多个 then() 链式调用，<strong>并不是连续的创建了多个微任务并推入微任务队列</strong>，因为 then() 的返回值必然是一个 Promise，而后续的 then() 是上一步 then() 返回的 Promise 的回调</p>\n</li>\n<li><p>按照规范</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">async function async1()&#123;\n  console.log(&#39;async1 start&#39;)\n  await async2()\n  console.log(&#39;async1 end&#39;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以转化为：</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">function async1()&#123;\n  console.log(&#39;async1 start&#39;)\n  return RESOLVE(async2())\n      .then(() &#x3D;&gt; &#123; console.log(&#39;async1 end&#39;) &#125;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>RESOLVE(p)</code>接近于<code>Promise.resolve(p)</code>，不过有微妙而重要的区别：p 如果本身已经是 Promise 实例，Promise.resolve 会直接返回 p 而不是产生一个新 promise；</p>\n</li>\n<li><p>如果<code>RESOLVE(p)</code>严格按照标准，应该产生一个新的 promise，尽管该 promise 确定会 resolve 为 p，<strong>但这个过程本身是异步的</strong>，也就是现在进入 job 队列的是<strong>新 promise 的 resolve 过程</strong>，所以该 promise 的 then 不会被立即调用，而要等到当前 job 队列执行到前述 resolve 过程才会被调用，然后其回调（也就是继续 await 之后的语句）才加入 job 队列，所以时序上就晚了</p>\n</li>\n<li><p>所以上述的 async1 函数我们可以进一步转换一下：</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">function async1()&#123;\n  console.log(&#39;async1 start&#39;)\n  return new Promise(resolve &#x3D;&gt; resolve(async2()))\n    .then(() &#x3D;&gt; &#123;\n      console.log(&#39;async1 end&#39;)\n    &#125;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON对象有两个方法。JSON支持三种类型值：简单值（不包括 undefined ，字符串、数字、null，布尔值均可），对象，数组。也没有分号</p>\n<p>JSON.stringify()</p>\n<p>JSON.parse()</p>\n<h2 id=\"网络请求和远程资源\"><a href=\"#网络请求和远程资源\" class=\"headerlink\" title=\"网络请求和远程资源\"></a>网络请求和远程资源</h2><p>Ajax</p>\n<p>asynchronous JavaScript and XML</p>\n<h3 id=\"XMLHttpRequest对象-XHR\"><a href=\"#XMLHttpRequest对象-XHR\" class=\"headerlink\" title=\"XMLHttpRequest对象-XHR\"></a>XMLHttpRequest对象-XHR</h3><p>XHR对象类型</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//XMR方法</span>\n\topen<span class=\"token operator\">:</span>function(method<span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">,</span>isAsync)<span class=\"token punctuation\">,</span><span class=\"token comment\">//必须首先使用的方法</span>\n\tsetRequestHeader<span class=\"token operator\">:</span>function(HeaderKey<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>HeaderValue<span class=\"token operator\">:</span>any)<span class=\"token comment\">//自定义发送头部的信息，必须在open之后，send之前调用此函数。需要区别于浏览器正常发送头部，因为部分浏览器允许重写默认头部，某些则会引起错误</span>\n\tsend<span class=\"token operator\">:</span>function(arg)<span class=\"token punctuation\">,</span><span class=\"token comment\">//参数为请求体数据，不存在请求体时参数需显示设置为 null</span>\n\n\t<span class=\"token comment\">//readyState变化时自动调用此函数</span>\n\tonreadystatechange<span class=\"token operator\">:</span>function()<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">//获取响应头部信息</span>\n\tgetResponseHeaders<span class=\"token operator\">:</span>function(headerKey<span class=\"token operator\">:</span>string)<span class=\"token punctuation\">,</span>\n\tgetAllResponseHeaders()<span class=\"token operator\">:</span>function()<span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token comment\">//send 方法执行得到返回内容之后，这些属性会被填充</span>\n\tresponseType<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\tresponseText<span class=\"token operator\">:</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//响应体文本</span>\n\tresponseXML<span class=\"token operator\">:</span>XML DOM<span class=\"token punctuation\">,</span><span class=\"token comment\">//响应类型为 text/xml 或者 application/xml 时返回的包含响应式数据的 XML DOM 文档</span>\n\tstatus<span class=\"token operator\">:</span>statusCode<span class=\"token punctuation\">,</span><span class=\"token comment\">//响应HTTP状态码 2xx表示成功，304表示资源未修改，直接从浏览器缓存读取，此两种情况都表示响应有效</span>\n\tstatusText<span class=\"token operator\">:</span>'description'<span class=\"token punctuation\">,</span><span class=\"token comment\">//HTTP状态描述信息</span>\n\n\n\t<span class=\"token comment\">//状态属性</span>\n\treadyState<span class=\"token operator\">:</span><span class=\"token number\">0</span>|<span class=\"token number\">1</span>|<span class=\"token number\">2</span>|<span class=\"token number\">3</span>|<span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//五种状态，0表示未调用 open 方法，未初始化，1表示已 open 但未 send，2表示 sent 但未收到响应，3表示收到部分响应 receiving ，4表示完成，已收到所有响应 complete。</span>\n\n\t<span class=\"token comment\">//收到响应之前可调用此方法终止异步请求，同时应当取消对该XHR对象的引用</span>\n\tabort<span class=\"token operator\">:</span>function()<span class=\"token punctuation\">,</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//创建XHR对象</span>\n<span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//使用XMR对象</span>\n<span class=\"token comment\">//首先必须使用open方法，三个参数依次是\t请求类型：string，请求URL：string，是否异步：Boolean；这里的URL是相对于代码所在的页面的，必须遵守同源策略（同一域名，同一端口，同一协议），否则抛出安全错误。</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'example.com'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myHaeder'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'myValue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>send时XHR默认会发送的头部字段：</p>\n<ul>\n<li>Accept 浏览器可以处理的内容类型</li>\n<li>Accept-Charset 浏览器支持显示的字符集</li>\n<li>Accept-Encoding 浏览器可以处理的压缩编码类型</li>\n<li>Accept-Language 浏览器使用的语言</li>\n<li>Connection 浏览器与服务器的连接类型</li>\n<li>Cookie 页面中设置的Cookie</li>\n<li>Host 发送请求的页面所在的域</li>\n<li>Referer 发送请求的页面的 URL ，将错就错，正确拼法是 referre</li>\n<li>User-Agent 浏览器的用户代理字符串</li>\n</ul>\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><p>The <code>encodeURIComponent()</code> method <strong>encodes</strong> a URI component. Use the <a href=\"https://www.w3schools.com/jsref/jsref_decodeuricomponent.asp\">decodeURIComponent()</a> function to <strong>decode</strong> an encoded URI component.</p>\n<h4 id=\"Post请求\"><a href=\"#Post请求\" class=\"headerlink\" title=\"Post请求\"></a>Post请求</h4><h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>跨域资源共享 Cross-origin Resource Share使用场景：</p>\n<ul>\n<li>由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch APIs</a> 发起的跨源 HTTP 请求。</li>\n<li>Web 字体 (CSS 中通过 <code>@font-face</code> 使用跨源字体资源)，<a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 贴图</a></li>\n<li>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>drawImage</code></a> 将 Images&#x2F;video 画面绘制到 canvas。</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images\">来自图像的 CSS 图形 (en-US)</a></li>\n</ul>\n<p>跨源资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\"><code>GET</code></a> 以外的 HTTP 请求，或者搭配某些 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME 类型</a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\"><code>POST</code></a> 请求），浏览器必须首先使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\">Cookies</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication\">HTTP 认证</a> 相关数据）。</p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>setInterval();  指每隔多少毫秒执行一次函数。因此它有两个参数，第一个参数为每次执行的函数，第二个参数为毫秒。如setInterval( fn, 16 )，返回值为id，用于标识一个setInterval调用。 </p>\n<p>setTimeout() 方法只运行一次，也就是说当达到设定的时间后就开始运行指定的代码，运行完后就结束了，次数是一次。 setInterval() 是循环执行的，即每达到指定的时间间隔就执行相应的函数或者表达式，只要窗口不关闭或clearInterval() 调用就会无限循环下去。</p>\n<p>date对象，包含一系列获取时间的方法</p>\n<h2 id=\"Control-abstraction-objects\"><a href=\"#Control-abstraction-objects\" class=\"headerlink\" title=\"Control abstraction objects\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects\">Control abstraction objects</a></h2><p>控制抽象对象</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\"><code>AsyncGeneratorFunction</code></a></li>\n</ul>\n<h2 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h2><p><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const p &#x3D; new Proxy(target, handler)\n\nhandler \n包含捕捉器（trap）的占位符对象，可译为处理器对象。\ntraps\n提供属性访问的方法。这类似于操作系统中捕获器的概念。\ntarget\n被 Proxy 代理虚拟化的对象。它常被作为代理的存储后端。根据目标验证关于对象不可扩展性或不可配置属性的不变量（保持不变的语义）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><code>Proxy.revocable()</code></strong> 方法可以用来创建一个可撤销的代理对象。细节见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\">此处</a>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Proxy.revocable(target, handler);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">JS和python都是解释型语言，仅需解释器在每次执行时编译并解释执行，编译型语言如c++，Java编译一次后，产生可执行文件可多次执行，效率高\n\n&lt;!--本地路径&#x2F;和\\是等效的--&gt;\n&lt;img src&#x3D;&quot;.\\Image\\20161025\\guo.jpg&quot; &#x2F;&gt;\n&lt;img src&#x3D;&quot;.&#x2F;Image&#x2F;20161025&#x2F;guo.jpg&quot; &#x2F;&gt;\n&lt;img src&#x3D;&quot;.\\Image&#x2F;20161025&#x2F;guo.jpg&quot; &#x2F;&gt;\n&lt;img src&#x3D;&quot;.&#x2F;Image\\20161025\\guo.jpg&quot; &#x2F;&gt;\n&lt;!--网络文件路径一定要使用正斜杠&#x2F;--&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>诞生于1995，出现时用于处理网页中的<strong>前端验证</strong>，发展中遵循ECMAScript标准，完整的JavaScript由三部分组成：<strong>ECMAScript标准，DOM文档对象模型，BOM浏览器对象模型</strong></p>\n<p>解释型语言，无需编译直接运行，动态语言，基于原型的面向对象，写在script标签中，从上到下逐条执行；标识符命名仅可以含有字母、数字、_、$</p>\n<h2 id=\"变量性质、关键字和特性\"><a href=\"#变量性质、关键字和特性\" class=\"headerlink\" title=\"变量性质、关键字和特性\"></a>变量性质、关键字和特性</h2><p>区分大小写，允许Unicode字母、数字和表意文字(意味着可以用汉字定义变量但不推荐)</p>\n<p>当浏览器开辟出供代码执行的栈<a href=\"https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020\">内存</a>后，代码并没有自上而下立即执行，而是继续做了一些事情：<strong>把当前作用域中所有带var&#x2F;function关键字的进行提前的声明和定义 &#x3D;&gt; 变量提升机制</strong></p>\n<p>typeof 操作符</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"string\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"let和var的区别\"><a href=\"#let和var的区别\" class=\"headerlink\" title=\"let和var的区别\"></a><code>let</code>和<code>var</code>的区别</h3><p> <code>let</code>和<code>const</code>不存在变量提升机制；<code>var</code>允许重复声明，而<code>let</code>不允许重复声明； <code>let</code>能解决<code>typeof</code>检测时出现的暂时性死区问题（<code>let</code>比<code>var</code>更严谨）；let创建的全局变量没有给window设置对应的属性；let会产生块级作用域</p>\n<ul>\n<li><code>var</code>声明是全局作用域或函数作用域，而<code>let</code>和<code>const</code>是块作用域。</li>\n<li><code>var</code>变量可以在其范围内更新和重新声明； <code>let</code>变量可以被更新但不能重新声明； <code>const</code>变量既不能更新也不能重新声明。</li>\n<li>它们都被提升到其作用域的顶端。但是，虽然使用变量<code>undefined</code>初始化了<code>var</code>变量，但未初始化<code>let</code>和<code>const</code>变量。</li>\n<li>尽管可以在不初始化的情况下声明<code>var</code>和<code>let</code>，但是在声明期间必须初始化<code>const</code>。</li>\n</ul>\n<p>暂时性死区：在块级顶部到变量正式申明这块区域去访问这个变量的话，直接报错</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错而不是到外部引用x</span>\n  \n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"六种数据类型\"><a href=\"#六种数据类型\" class=\"headerlink\" title=\"六种数据类型\"></a>六种数据类型</h3><p><code>String</code> <code>Number</code> <code>Boolean</code>  <code>Undefined</code> <code>Symbol</code> <code>Object</code> </p>\n<p><code>Object</code>为引用数据类型  </p>\n<ul>\n<li><p>Number</p>\n<p>均采用IEEE 754存储数字，会把能转换为整数的小数转换为整数。科学计数法：3.123e7等效于3.123*10^7</p>\n<p>八进制值用0o做前缀，十六进制0x前缀</p>\n<p>浮点值最高精度为1e-17，不宜用js做科学计算</p>\n<p><code>NaN</code>表示<code>Not a Number</code>，数据类型也是<code>Number</code>，有<code>Number.MIN_VALUE</code>&#x3D;5E-324，<code>Number.MAX_VALUE</code>&#x3D;1.797e308，还有正无穷 Infinity 和负无穷 -Infinity。函数 isFinite()可以判断数值是不是有限</p>\n<p>isNaN()函数可以判断所给参数是否能转换为数值，不能则返回 true</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">isNan</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回false，因为能转化为数字</span>\n\nnum<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token comment\">//浮点数规整化，digits为小数点后保留位数</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//return the integer portion of a number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>即将支持的 BigInt 大数，在number字面量后加上 n 即可。可以表示任意大整数。</p>\n</li>\n<li><p><code>null</code>值用来表示一个为空的对象，<code>typeof null</code>时返回<code>object</code>类型。原则上 null 表示一个空指针</p>\n</li>\n<li><p>string：将其他数据类型转换为String类型：<code>toString</code>方法和<code>String</code>函数，前者不能转换null和undefined类型，后者可以，凡遇字母转换为<code>NaN</code>。  转换为Number类型：Number函数，针对字符串有<code>parseInt</code>和<code>parseFloat</code>，这两个函数遇到其他类型时会先将对象转换为字符串再进行转换。</p>\n<p>toString()方法在用于数值对象时可以接受参数，表示转换为不同进制的数字字符。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"10\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1010\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"10\" </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\" </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>用加号操作符给一个值加上一个空字符串””也可以将其转换为字符串</em></p>\n<ul>\n<li><p>&#96;&#96;反引号，不同于单引号’’和双引号””，可以包裹模板字符串，能够允许嵌入表达式的字符串字面量，嵌入${expression}即可</p>\n</li>\n<li><p>标签函数标签函数 会接收被插值记号分隔后的模板和对每个表达式求值的结果。 标签函数本身是一个常规函数，通过前缀到模板字面量来应用自定义行为。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">simpleTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>expressions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> expression <span class=\"token keyword\">of</span> expressions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">let</span> taggedResult <span class=\"token operator\">=</span> simpleTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> a <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> b <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span> a <span class=\"token operator\">+</span> b <span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [\"\", \" + \", \" = \", \"\"] 字符串数组</span>\n<span class=\"token comment\">// 6 </span>\n<span class=\"token comment\">// 9 </span>\n<span class=\"token comment\">// 15 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>taggedResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foobar\" </span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>用模板字面量也可以直接获取原始的模板字面量内容。在标签函数的第一个参数中，存在一个特殊的属性<code>raw</code>，其他地方无法对字符串数组使用。</p>\n</li>\n</ul>\n</li>\n<li><p>Symbol类型：唯一标识符，具有唯一性、隐藏性（用作对象属性名时无法通过object.key访问，而需要定制的object.getOwnPropertySymbols()方法得到对象中所有用作属性名的symbol）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> id1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> id2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">===</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\n<span class=\"token keyword\">let</span> id3 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id1<span class=\"token operator\">===</span>id3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n\n<span class=\"token keyword\">let</span> id4  <span class=\"token operator\">=</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id3<span class=\"token operator\">===</span>id4<span class=\"token punctuation\">)</span><span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>全局注册并登记，使得相同参数注册的值symbol相等。前提是都通过for注册登记。</p>\n</li>\n</ul>\n<p>数字0，空字符串，NaN，空指针null，undefined都可以自动转化为false</p>\n<p>null 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 <strong>对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。</strong>因此，<strong>需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。</strong></p>\n<h2 id=\"基础语句\"><a href=\"#基础语句\" class=\"headerlink\" title=\"基础语句\"></a>基础语句</h2><p>==运算符会做强制类型转换\t===不会，单引号双引号和python一样，都可以用来包裹字符串，无区别。</p>\n<p>typeof 操作符，返回其后变量或字面量的类型</p>\n<p>+ 能做数字间的加减运算，当任一对象为字符串时会把另一参加运算对象转化为字符串再进行字符串拼接，参与运算对象为 object 或其他类型时会先转换为字符串再按如上规则运算</p>\n<ul>\n<li><p>try{}catch{}finally{}</p>\n<p>1.try中有return, 会先将值暂存，无论finally语句中对该值做什么处理，最终返回的都是try语句中的暂存值。</p>\n<p>2.当try与finally语句中均有return语句，会忽略try中return。</p>\n</li>\n</ul>\n<h3 id=\"空值合并运算符\"><a href=\"#空值合并运算符\" class=\"headerlink\" title=\"空值合并运算符\"></a>空值合并运算符</h3><p><strong>空值合并操作符</strong>（**<code>??</code>**）是一个逻辑操作符，当左侧的操作数为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> 时，返回其右侧操作数，否则返回左侧操作数。</p>\n<p>与[逻辑或操作符（<code>||</code>）不同，逻辑或操作符会在左侧操作数为<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\">假值</a>时返回右侧操作数。也就是说，如果使用 <code>||</code> 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，<code>&#39;&#39;</code> 或 <code>0</code>）时。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">'default string'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: \"default string\"</span>\n\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 0</span>\n\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>逻辑空赋值 ??&#x3D;</p>\n<p>x ??&#x3D; y ，x为null或undefined时才赋值为右值。</p>\n<h3 id=\"可选链操作符\"><a href=\"#可选链操作符\" class=\"headerlink\" title=\"可选链操作符\"></a>可选链操作符</h3><p>?.\tTS中遇到过</p>\n<p>判断是否为空</p>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><p>ES6 </p>\n<ul>\n<li><p>数组结构赋值：</p>\n<p>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>对象解构赋值：</p>\n<p>注意loc: { start }和loc: start是不一样的，前者把start也作为模式串，而后者只有loc是模式串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">loc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">line</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">column</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> loc<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> start <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> line <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\nline <span class=\"token comment\">// 1</span>\nloc  <span class=\"token comment\">// Object &#123;start: Object&#125;</span>\nstart <span class=\"token comment\">// Object &#123;line: 1, column: 5&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>默认值，生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nx <span class=\"token comment\">// 3var </span>\n\n<span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nx <span class=\"token comment\">// null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span> <span class=\"token operator\">:</span> first<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> last<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">//index</span>\nfirst <span class=\"token comment\">// 1</span>\nlast <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 箭头函数\nforEach(() &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\nforEach((value) &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\nforEach((value, key) &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\nforEach((value, key, map) &#x3D;&gt; &#123; &#x2F;* … *&#x2F; &#125; )\n\n&#x2F;&#x2F; 回调函数\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n\n&#x2F;&#x2F; 内联回调函数\nforEach(function() &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value) &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value, key) &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value, key, map) &#123; &#x2F;* … *&#x2F; &#125;)\nforEach(function(value, key, map) &#123; &#x2F;* … *&#x2F; &#125;, thisArg)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Map和Set\"><a href=\"#Map和Set\" class=\"headerlink\" title=\"Map和Set\"></a>Map和Set</h2><ul>\n<li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li>\n<li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li>\n</ul>\n<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。重复值的元素会被略去。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Set.prototype.add(value)\n在Set对象尾部添加一个元素。返回该 Set 对象\n\nSet.prototype.delete(value)\n移除值为 value 的元素，并返回一个布尔值来表示是否移除成功。Set.prototype.has(value) 会在此之后返回 false。\n\nSet.prototype.has(value)\n返回一个布尔值，表示该值在 Set 中存在与否。\n\nSet.prototype.clear()\n移除Set对象内的所有元素。\n\nSet.prototype.forEach(callbackFn[, thisArg])\n按照插入顺序，为 Set 对象中的每一个值调用一次 callBackFn。如果提供了thisArg参数，回调中的 this 会是这个参数。\n\nSet.prototype.values()\n返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>let newArray &#x3D; Array.from(set)，可以把括号内的对象转换为array并返回</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Map.prototype.size\n返回 Map 对象中的键值对数量。\n\nMap.prototype.get(key)\n返回与 key 关联的值，若不存在关联的值，则返回 undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，用来表明 Map 对象中是否存在与 key 关联的值。\n\nMap.prototype.set(key, value)\n在 Map 对象中设置与指定的键 key 关联的值 value，并返回 Map 对象。\n\nMap.prototype.delete(key)\n移除 Map 对象中指定的键值对，如果键值对存在并成功被移除，返回 true，否则返回 false。调用 delete 后再调用 Map.prototype.has(key) 将返回 false。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h3><p><strong><code>WeakMap</code></strong> 对象是一组键&#x2F;值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</p>\n<p>map API <em>可以</em> 通过使其四个 API 方法共用两个数组（一个存放键，一个存放值）来实现。给这种 map 设置值时会同时将键和值添加到这两个数组的末尾。从而使得键和值的索引在两个数组中相对应。当从该 map 取值的时候，需要遍历所有的键，然后使用索引从存储值的数组中检索出相应的值。</p>\n<p>但是存在两个缺点：</p>\n<ol>\n<li>首先赋值和搜索操作都是 <em>O(*n</em>)* 的时间复杂度（<em>n</em> 是键值对的个数），因为这两个操作都需要遍历全部整个数组来进行匹配。</li>\n<li>另外一个缺点是可能会导致内存泄漏，因为数组会一直引用着每个键和值。这种引用使得垃圾回收算法不能回收处理他们，即使没有其他任何引用存在了。</li>\n</ol>\n<p>相比之下，原生的 <code>WeakMap</code> 持有的是每个键对象的“弱引用”，这意味着在没有其他引用存在时垃圾回收能正确进行。原生 <code>WeakMap</code> 的结构是特殊且有效的，其用于映射的 key _只有_在其没有被回收时才是有效的。</p>\n<p><strong>正由于这样的弱引用，<code>WeakMap</code> 的 key 是不可枚举的</strong>（没有方法能给出所有的 key）。如果 key 是可枚举的话，其列表将会受垃圾回收机制的影响，从而得到不确定的结果。因此，如果你想要这种类型对象的 key 值的列表，你应该使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>。</p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete\"><code>WeakMap.prototype.delete(key)</code></a></p>\n<p>删除 WeakMap 中与 <code>key</code> 相关联的值。删除之后， <code>WeakMap.prototype.has(key)</code> 将会返回 <code>false</code>。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\"><code>WeakMap.prototype.get(key)</code></a></p>\n<p>返回 WeakMap 中与 <code>key</code> 相关联的值，如果 <code>key</code> 不存在则返回 <code>undefined</code>。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\"><code>WeakMap.prototype.has(key)</code></a></p>\n<p>返回一个布尔值，断言一个值是否已经与 <code>WeakMap</code> 对象中的 <code>key</code> 关联。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\"><code>WeakMap.prototype.set(key, value)</code></a></p>\n<p>给 <code>WeakMap</code> 中的 <code>key</code> 设置一个 <code>value</code>。该方法返回一个 <code>WeakMap</code> 对象。</p>\n</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pop()删除末尾元素 ，返回移除的数组元素；\npush(ele)末尾添加元素 ele，返回添加后数组的长度；\nshift()删除首元素并移动数组位置 ，返回添加后数组的长度；\nunshift(ele)在数组首位置添加元素ele，返回添加后数组的长度；\n\nshift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。\n\nunshift方法\nunshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度（该方法修改原有数组）\narr.unshift(element1, ..., elementN)\n返回其 length 属性值\n\nArray.isArray(val):判断val是不是数组\n\nArray.prototype 属性表示 Array 构造函数的原型，并允许向所有Array对象添加新的属性和方法。或者说，允许利用prototype向任何对象添加属性和方法，从而应用到对象的所有实例上<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"遍历操作\"><a href=\"#遍历操作\" class=\"headerlink\" title=\"遍历操作\"></a>遍历操作</h3><p>最常用for (var i &#x3D; 0; i &lt; a.length; i++) {<br>    &#x2F;&#x2F; Do something with a[i]<br>}</p>\n<p>for (. of array)：for (const currentValue of a)  {&#x2F;&#x2F; Do something with currentValue}</p>\n<p>for(. in array)：for (var i in a) {&#x2F;&#x2F; 操作 a[i]}遍历索引，如果直接向 Array.prototype 添加了新的属性，使用这样的循环这些属性也同样会被遍历。不推荐这个循环</p>\n<p>forEach()：<br>array.forEach(function(currentValue, index, array) {&#x2F;&#x2F; 操作 currentValue 或者 array[index]});</p>\n<p>注: forEach() 对于空数组是不会执行回调函数的。</p>\n<h3 id=\"Array-prototype-at\"><a href=\"#Array-prototype-at\" class=\"headerlink\" title=\"Array.prototype.at()\"></a><a href=\"https://link.segmentfault.com/?enc=gIfegOUoZxxLBOg/nmpAvw==.it+TiWVsG0Y95ewedhlKoMS2CPXZSbhECA0MBePgVHbbS3pnn4r95vxFQo8Wnk+rFcIZQbnMXjwFeEBW9uTMx/mnhkJ0ck8W/V9MIZGB4SZb5GqmV1RLVPtXvNkMw7kq\">Array.prototype.at()</a></h3><ul>\n<li>返回at中参数指向的index的数组元素，支持负数</li>\n</ul>\n<h3 id=\"array-prototype-concat\"><a href=\"#array-prototype-concat\" class=\"headerlink\" title=\"array.prototype.concat()\"></a>array.prototype.concat()</h3><p>拼接两个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value0<span class=\"token punctuation\">)</span>\n<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value0<span class=\"token punctuation\">,</span> value1<span class=\"token punctuation\">)</span>\n<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value0<span class=\"token punctuation\">,</span> value1<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* … ,*/</span> valueN<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>valueN</code> 可选</p>\n<p>数组和&#x2F;或值，将被合并到一个新的数组中。如果省略了所有 <code>valueN</code> 参数，则 <code>concat</code> 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。</p>\n<h3 id=\"array-indexOf\"><a href=\"#array-indexOf\" class=\"headerlink\" title=\"array.indexOf\"></a>array.indexOf</h3><ul>\n<li>判断数组中是否存在某个值，如果存在返回数组元素的下标，否则返回-1</li>\n</ul>\n<h3 id=\"array-includes-searchElement-fromIndex\"><a href=\"#array-includes-searchElement-fromIndex\" class=\"headerlink\" title=\"array.includes(searchElement[, fromIndex])\"></a>array.includes(searchElement[, fromIndex])</h3><ul>\n<li>判断一个数组是否包含一个指定的值，如果存在返回 true，否则返回false。</li>\n</ul>\n<h3 id=\"reduce-方法\"><a href=\"#reduce-方法\" class=\"headerlink\" title=\"reduce()方法\"></a>reduce()方法</h3><p><strong><code>reduce()</code></strong> 方法对数组中的每个元素按序执行一个由您提供的 <strong>reducer</strong> 函数，每一次运行 <strong>reducer</strong> 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token parameter\">total<span class=\"token punctuation\">,</span>\n\t\tcurrentValue<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span>initialValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>reduce() 方法接收一个回调函数作为参数，reduce 为数组中的每一个元素依次执行回调函数，回调函数接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。<br>reduce方法的返回值为回调函数最后的返回值。</p>\n<p>如果没有提供initialValue，那么reduce的第一轮回调函数中的“total”就arr[0]，“current_Value”就是arr[1]，index就是1；</p>\n<p>如果提供initialValue，那么reduce的第一轮回调函数中的“total”就是initialValue，“current_Value”就是arr[0]，index就是0。</p>\n<p>所以在使用reduce函数时，回调函数中return最好不要省，而且initialValue也最好不要省！！！</p>\n<h3 id=\"filter-方法\"><a href=\"#filter-方法\" class=\"headerlink\" title=\"filter() 方法\"></a>filter() 方法</h3><p>返回一个新数组，其包含通过所提供函数实现的测试的所有元素。 </p>\n<p>var newArray &#x3D; arr.filter(callback(element[, index[, array]])[, thisArg])</p>\n<p>上式中 element 必需，后三者都可选，但没传 index 则 array 也不能传</p>\n<p>注：当所过滤的数组是对象数组的情况时，对新返回的数组元素属性做出修改，同时对原数组也会造成影响；当过滤数组为纯数组时，修改不会改变原数组。也就是浅拷贝</p>\n<h3 id=\"from方法\"><a href=\"#from方法\" class=\"headerlink\" title=\"from方法\"></a>from方法</h3><p>Array.from(arrayLike[, mapFn[, thisArg]])参数分别为伪数组对象或可迭代对象，新数组中的每个元素会执行的回调函数，执行回调函数 mapFn 时 this 对象<br>返回一个新的数组实例。</p>\n<p>Array.from(arrayLike[, mapFunction[, thisArg]])：arrayLike：必传参数，想要转换成数组的伪数组对象或可迭代对象。<br>mapFunction：可选参数，mapFunction(item，index){…} 是在集合中的每个项目上调用的函数。返回的值将插入到新集合中。<br>thisArg：可选参数，执行回调函数 mapFunction 时 this 对象。这个参数很少使用。</p>\n<h3 id=\"array-map-方法\"><a href=\"#array-map-方法\" class=\"headerlink\" title=\"array.map() 方法\"></a>array.map() 方法</h3><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值，按照原始数组元素顺序依次处理元素。<br>array_back&#x3D;array.map(function(currentValue,index,arr), thisValue)</p>\n<p>注：map()方法不会对空数组进行检测；也不会改变原数组</p>\n<p>eg.\tlet arr &#x3D; new Array( 2 ).fill( 0 ).map( _ &#x3D;&gt; new Array( 3 ) ); &#x2F;&#x2F;作用类似C语言：int arr[2][3]</p>\n<h3 id=\"arr-slice-begin-end\"><a href=\"#arr-slice-begin-end\" class=\"headerlink\" title=\"arr.slice([begin[, end]])\"></a>arr.slice([begin[, end]])</h3><ul>\n<li><code>begin</code> 可选，可为负。如果 <code>begin</code> 大于<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>长度，返回空数组。slice(-1) 提取最后一个元素，slice(-2)提取最后两个元素，依次类推。前包后不包。<br><a href=\"https://so.csdn.net/so/search?q=slice&spm=1001.2101.3001.7020\">slice</a>() 返回整个数组。</li>\n</ul>\n<h3 id=\"array-splice-start-deleteCount-item1-item2-…\"><a href=\"#array-splice-start-deleteCount-item1-item2-…\" class=\"headerlink\" title=\"array.splice(start[, deleteCount[, item1[, item2[, …]]]])\"></a>array.splice(start[, deleteCount[, item1[, item2[, …]]]])</h3><ul>\n<li>start 指定修改的开始位置（从 0 计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从 -1 计数，这意味着 -n 是倒数第 n 个元素并且等价于 <code>array.length-n</code>）；如果负数的绝对值大于数组的长度，则表示开始位置为第 0 位。</li>\n<li>deleteCount :整数，表示要移除的数组元素的个数。如果 <code>deleteCount</code> 大于 <code>start</code> 之后的元素的总数，则从 <code>start</code> 后面的元素都将被删除（含第 <code>start</code> 位）。如果 <code>deleteCount</code> 被省略了，或者它的值大于等于<code>array.length - start</code>(也就是说，如果它大于或者等于<code>start</code>之后的所有元素的数量)，那么<code>start</code>之后数组的所有元素都会被删除。如果 <code>deleteCount</code> 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</li>\n<li>item:从start位置要添加进数组的元素，不指定时 splice 将只删除元素。</li>\n</ul>\n<p>返回被删除的元素</p>\n<h3 id=\"arr-sort-compareFn\"><a href=\"#arr-sort-compareFn\" class=\"headerlink\" title=\"arr.sort([compareFn])\"></a>arr.sort([compareFn])</h3><p>如果没有指明 <code>compareFn</code> ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 <code>compareFn</code>），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。</p>\n<ul>\n<li>如果 <code>compareFn(a, b)</code> 大于 0 ， b 会被排列到 a 之前。</li>\n<li>如果 <code>compareFn(a, b)</code> 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 <code>compareFn(a, b)</code> 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li><code>compareFn(a, b)</code> 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</li>\n</ul>\n<h3 id=\"strArr-join-separator\"><a href=\"#strArr-join-separator\" class=\"headerlink\" title=\"strArr.join(separator)\"></a>strArr.join(separator)</h3><ul>\n<li>用输入参数分隔输入字符串数组的每个元素，返回新字符串</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>可以直接用比较符号比较字符串</p>\n<h3 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h3><p>escape-unescape方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . &#x2F; 。其他所有的字符都会被转义序列替换。</p>\n<p>encodeURI-decodeURI对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的： , &#x2F; ? : @ &amp; &#x3D; + $ # </p>\n<p>encodeURIComponent-decodeURIComponent该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ‘ ( ) 。其他字符（比如 ：;&#x2F;?:@&amp;&#x3D;+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</p>\n<p><strong>1、如果只是<a href=\"https://www.zhihu.com/search?q=%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E4%B8%B2&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:20300871%7D\">编码字符串</a>，不和URL有半毛钱关系，那么用escape。</strong></p>\n<p><strong>2、如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。</strong></p>\n<p>比如</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.cnblogs.com/season-huang/some other thing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编码后会变为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"http://www.cnblogs.com/season-huang/some%20other%20thing\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看到了区别吗，连 “&#x2F;“ 都被编码了，整个URL已经没法用了。</p>\n<p><strong>3、当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法。</strong></p>\n<h3 id=\"String-prototype-charAt-index\"><a href=\"#String-prototype-charAt-index\" class=\"headerlink\" title=\"String.prototype.charAt(index)\"></a>String.prototype.charAt(index)</h3><p>指定 <code>index</code> 处字符，参数不在 0 和字符串的 length-1 之间，则返回空字符串</p>\n<h3 id=\"String-prototype-charCodeAt-index\"><a href=\"#String-prototype-charCodeAt-index\" class=\"headerlink\" title=\"String.prototype.charCodeAt(index)\"></a>String.prototype.charCodeAt(index)</h3><p>index：一个大于等于 <code>0</code>，小于字符串长度的整数。如果不是一个数值，则默认为 <code>0</code>。</p>\n<p>返回值：指定 <code>index</code> 处字符的 UTF-16 代码单元值的一个数字；如果 <code>index</code> 超出范围，<code>charCodeAt()</code> 返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>。</p>\n<p>如果指定的 <code>index</code> 小于 <code>0</code> 、等于或大于字符串的长度，则 <code>charCodeAt</code> 返回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>。</p>\n<h3 id=\"String-fromCharCode\"><a href=\"#String-fromCharCode\" class=\"headerlink\" title=\"String.fromCharCode()\"></a>String.fromCharCode()</h3><p>静态 <strong><code>String.fromCharCode()</code></strong> 方法返回由指定的 UTF-16 代码单元序列创建的字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"indexOf-和-lastIndexOf\"><a href=\"#indexOf-和-lastIndexOf\" class=\"headerlink\" title=\"indexOf() 和 lastIndexOf()\"></a>indexOf() 和 lastIndexOf()</h3><p>使用字符串的 indexOf() 和 lastIndexOf() 方法，可以根据参数字符串，返回指定子字符串的下标位置。这两个方法都有两个参数，说明如下。</p>\n<ul>\n<li>第一个参数为一个子字符串，指定要查找的目标。</li>\n<li>第二个参数为一个整数，指定查找的起始位置，取值范围是 0~length-1。</li>\n</ul>\n<p>对于第二个参数来说，需要注意一下几个特殊情况。</p>\n<ul>\n<li>如果值为负数，则视为 0，相当于从第一个字符开始查找。</li>\n<li>如果省略了这个参数，也将从字符串的第一个字符开始查找。</li>\n<li>如果值大于等于 length 属性值，则视为当前字符串中没有指定的子字符串，返回 -1。</li>\n</ul>\n<h3 id=\"str-match-reg\"><a href=\"#str-match-reg\" class=\"headerlink\" title=\"str.match(reg)\"></a>str.match(reg)</h3><p>&#x2F;.&#x2F;g</p>\n<p>方法对字符串对象进行检索,返回包含所有匹配结果的数组。而 正则表达式 &#x2F;.&#x2F;g 匹配的是所有的字符， 所以str.match(&#x2F;.&#x2F;g)返回的是由字符串str中所有的字符组成的数组，以此达到将字符串转换为数组的目的。 </p>\n<h3 id=\"str-replace-pattern-replacement\"><a href=\"#str-replace-pattern-replacement\" class=\"headerlink\" title=\"str.replace(pattern, replacement)\"></a>str.replace(pattern, replacement)</h3><p>两个参数均为字符串，寻找到模式串替换为后者。</p>\n<h3 id=\"str-search-regexp\"><a href=\"#str-search-regexp\" class=\"headerlink\" title=\"str.search(regexp)\"></a>str.search(regexp)</h3><p>返回 str 中给定正则表达式对应索引</p>\n<h3 id=\"str-slice-a-b\"><a href=\"#str-slice-a-b\" class=\"headerlink\" title=\"str.slice(a,b)\"></a>str.slice(a,b)</h3><p>前包后不包；截取出来的字符串的长度为第二个参数与第一个参数之间的差；若参数值为负数,则将该值加上字符串长度后转为正值；若第一个参数等于大于第二个参数,则返回空字符串.</p>\n<h3 id=\"str-substring-a-b\"><a href=\"#str-substring-a-b\" class=\"headerlink\" title=\"str.substring(a,b)\"></a>str.substring(a,b)</h3><p>前包后不包；若参数值为负数,则将该值转为0;两个参数中,取较小值作为开始位置,截取出来的字符串的长度为较大值与较小值之间的差.</p>\n<h3 id=\"str-split-separator\"><a href=\"#str-split-separator\" class=\"headerlink\" title=\"str.split(separator)\"></a>str.split(separator)</h3><p>分割字符串，返回字符数组</p>\n<h3 id=\"str-substr-a-length\"><a href=\"#str-substr-a-length\" class=\"headerlink\" title=\"str.substr(a,length)\"></a>str.substr(a,length)</h3><p>第一个参数代表开始位置,第二个参数代表截取的长度</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"基础-1\"><a href=\"#基础-1\" class=\"headerlink\" title=\"基础\"></a>基础</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">avg</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;=</span><span class=\"token operator\">></span><span class=\"token keyword\">function</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//js创建函数有两种：一是函数声明function fnName () &#123;…&#125;;，二是函数表达式var fnName = function () &#123;…&#125;;前者因 js 具有 函数声明提升 所以定义在任何位置均可成功调用，而后者必须等到定义语句被解释后才能正常调用(与 var 的变量定义提升不同)</span>\n<span class=\"token comment\">//还有一种匿名函数：function () &#123;…&#125;; 使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数，匿名函数属于函数表达式，匿名函数有很多作用，赋予一个变量则创建函数，赋予一个事件则成为事件处理程序或创建闭包等等。</span>\n函数表达式后面可以加括号立即调用该函数，<span class=\"token operator\">*</span><span class=\"token function\">函数声明不可以，只能以fnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>形式调用<span class=\"token operator\">*</span> 存疑，在控制台中调用成功。是因为在函数定义前面加了运算符，比如用括号包裹，把它也转换为了表达式。\n<span class=\"token function\">总结一下就是当把函数定义为表达式时总能在后面加上括号来立即调用。</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">a</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  三者均能立即调用。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由 <code>Function</code> 构造函数创建的函数不会创建当前环境的闭包，它们总是被创建于全局环境，因此在运行时它们只能访问全局变量和自己的局部变量，不能访问它们被 <code>Function</code> 构造函数创建时所在的作用域的变量。这一点与使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> 执行创建函数的代码不同。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">too</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, not 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">8</span>\nlet ans<span class=\"token operator\">=</span>x <span class=\"token operator\">=</span><span class=\"token operator\">></span> x<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>js的&#x3D;&gt;符号类似于lambda</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x3D;&gt;是es6中的arrow function语法\n(x) &#x3D;&gt; x + 6\n相当于\nfunction(x)&#123;return x + 6;&#125;;\n\nconst funcname&#x3D;(args)&#x3D;&gt;&#123;...&#125;\t\t函数调用：funcname(args)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>eval()函数，参数是一个字符串。如果字符串表示的是表达式，<code>eval()</code> 会对表达式进行求值。如果参数表示一个或多个 JavaScript 语句，那么<code>eval()</code> 就会执行这些语句。如果 <code>eval()</code> 的参数不是字符串， <code>eval()</code> 会将参数原封不动地返回。</p>\n<p>永远不要使用eval()</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>嵌套函数可以访问父函数作用域中的变量，可以利用这个特性减少全局变量的数量，有效地防止“污染”你的全局命名空间——你可以称它为“局部全局（local global）”。换种思路，把全局当作整体函数，那么就能形成作用域链(scope chain)，嵌套者能访问被嵌套者的变量，反之则不行，寻找变量的定义时总是从当前嵌套层或者说从金字塔的当前区域往外(往下)寻找，就近选择。需要注意的是每个函数的金字塔是不同的，在该函数被定义的时候就已经确定了，所以当在函数内部调用之前已定义的函数时，应当回到那个函数的“金字塔”寻找其所需要的变量，当前函数的作用域不会与产生交集。</p>\n<p>头等函数(first-class functions)，可以当作参数被传递的函数。回调函数(callback)是被作为参数传递的函数，注意是函数作为参数，而非函数返回值作为参数，与其对应的是高阶函数，是使用回调函数的函数。</p>\n<p>回调机制包括三方：起始函数，中间函数，回调函数；起始函数调用中间函数，把回调函数作为参数传递给中间函数。起始函数一般是当前运行的主函数，一般隐藏忽略，主要关注回调函数和把回调函数作为参数的中间函数。</p>\n<p>回调实际上有两种：阻塞式回调和延迟式回调。两者的区别在于：阻塞式回调里，回调函数的调用一定发生在起始函数返回之前；而延迟式回调里，回调函数的调用有可能是在起始函数返回之后。</p>\n<h3 id=\"call、apply和bind\"><a href=\"#call、apply和bind\" class=\"headerlink\" title=\"call、apply和bind\"></a>call、apply和bind</h3><p><code>myfunc(...args)&lt;=&gt;myfunc.apply(null,args)</code>展开语法将数组展开为数组元素。<strong>剩余参数</strong>语法允许我们将一个不定数量的参数表示为一个数组，与展开语法恰恰相反，形式为定义函数时<code>function fun1(...theArgs)&#123;alert(theArgs.length);&#125;</code>。剩余参数也可以被解构为包含变量，形式为<code>function f(...[a, b, c]) &#123;return a + b + c;&#125;</code>. </p>\n<p><code>apply()</code> 的第一个参数应该是一个被当作 <code>this</code> 来看待的对象。于是这里是全局对象。</p>\n<p><code>apply()</code> 有一个姐妹函数，名叫 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>，它也可以允许你设置 <code>this</code>，但它带有一个扩展的参数列表而不是一个数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>thisArg是函数执行时的 this 对象。call 实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 判断调用对象</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断 context 是否传入，如果没有传就设置为 window</span>\n    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span>\n\targs <span class=\"token operator\">=</span> args <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//通过隐式绑定的方式调用函数</span>\n    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除手动增加的属性方法</span>\n    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将执行结果返回</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类似的apply实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    args <span class=\"token operator\">=</span> args <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>bind先返回一个绑定了this的函数，再次执行则在this中执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a &#x3D;&#123;\n\tname : &quot;Cherry&quot;,\n\tfn : function (a,b) &#123;\n\t\tconsole.log( a + b)\n\t&#125;\n&#125;\n\nvar b &#x3D; a.fn;\nb.bind(a,1,2)()           &#x2F;&#x2F; 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bind利用apply实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    args <span class=\"token operator\">=</span> args <span class=\"token operator\">?</span> args <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">newFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>newFnArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">newFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newFnArgs<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>newFnArgs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h3><p>将接受 <strong>n 个参数的 1 个函数改为只接受一个参数的 n 个互相嵌套的函数</strong>，当前置部分参数一致时，可以通过固定前置参数生成指定函数，简化代码。</p>\n<p>对应偏函数是柯里化的宽松情况，不一定需要每一层都只固定一个参数，继承思想即可。</p>\n<h3 id=\"函数参数的传递\"><a href=\"#函数参数的传递\" class=\"headerlink\" title=\"函数参数的传递\"></a>函数参数的传递</h3><p>有值传递和引用传递，基本类型传递值，引用类型(对象)传递对象的地址，如果在函数中对对象重新赋值，则传递进来的地址改变，即在堆中重新分配一段空间，改变传递进来地址的值指向这个新的地址，不影响原对象。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function changeAgeAndReference(person) &#123;\n    person.age &#x3D; 25;\n    person &#x3D; &#123;\n        name: &quot;John&quot;,\n        age: 50\n    &#125;;\n\n    return person;\n&#125;\nvar personObj1 &#x3D; &#123;\n    name: &quot;Alex&quot;,\n    age: 30\n&#125;;\nvar personObj2 &#x3D; changeAgeAndReference(personObj1);\nconsole.log(personObj1); &#x2F;&#x2F; -&gt; &#123;name: &#39;Alex&#39;, age: 25&#125;\nconsole.log(personObj2); &#x2F;&#x2F; -&gt; &#123;name: &#39;John&#39;, age: 50&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对对象的重新赋值在任何地方都是如此：在动态堆中重新分配内存空间并赋值，再把原地址的值改为新对象的地址。</p>\n<p>当一个对象没有对应地址指向时，也就是上一段中原对象的情况，这个对象的内存地址会被回收，这是js的垃圾回收机制</p>\n<p>“如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。这就要求实时查看内存占用。”避免内存泄漏的要点在于往后不会使用的变量要及时赋空。</p>\n<h2 id=\"闭包、词法环境-作用域\"><a href=\"#闭包、词法环境-作用域\" class=\"headerlink\" title=\"闭包、词法环境(作用域)\"></a>闭包、词法环境(作用域)</h2><p>一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。</p>\n<ul>\n<li>用于保存私有属性：将不需要对外暴露的属性、函数保存在闭包函数的父函数里，避免外部操作对值的干扰</li>\n<li>避免局部属性污染全局变量空间导致的命名空间混乱</li>\n<li>模块化封装，将对立的功能模块通过闭包进去封装，只暴露较少的 API 供外部应用使用</li>\n</ul>\n<p>缺点：内存消耗，由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。</p>\n<p>c语言退出函数时局部变量也会退出其作用域，所以难以创建闭包；js创建函数时会保留其能访问的变量的地址，这也是创建闭包的前提所在。</p>\n<p>词法环境有两大成员：<strong>「Environment Record（环境记录）」</strong>，可能为 null 的 <strong>「Outer Lexical Environment（外部词法环境引用）」</strong>。<strong>任何在环境记录中的标识符都可以在当前词法环境直接以标识符形式访问</strong>。</p>\n<p>Environment Record 是一个抽象类，存在三个具体的子类，<strong>「Declarative Environment Record」</strong> ，<strong>「Object Environment Record」</strong>，<strong>「Global Environment Record（全局环境记录）」</strong></p>\n<p>声明式环境记录保存 let、const、function 等非 var 声明标识符，对象式环境记录保存 var 声明标识符。 </p>\n<h3 id=\"对象式环境记录\"><a href=\"#对象式环境记录\" class=\"headerlink\" title=\"对象式环境记录\"></a>对象式环境记录</h3><p>对象式记录也是用于记录标识符与变量的映射，但是它只记录var声明的标识符 ； 并且它有一个关联的绑定对象(binding object)。</p>\n<ul>\n<li><p>在词法环境中，会为对象式环境记录中所有的标识符绑定到绑定对象的同名属性上。<br>例如var number&#x3D;1000; , 也能够通过window.number形式获取到number的值。</p>\n</li>\n<li><p>反过来也可以，会将绑定对象的所有属性名（自然也必须是能做标识符的）绑定到对象式环境记录中的同名标识符上。<br>例如：window.thousand &#x3D; 1000; 然后直接以 thousand就能获取到该值（严格模式下报错）</p>\n</li>\n<li><p>每个标识符在绑定后都会直接实例化并初始化为undefined ，如果标识符已经绑定了绑定对象上的原有属性上，那么该变量就是对应属性值 。<br>比如之前的isNaN在声明前使用时就有值，就是这个原因。<br>变量提升也是这个原因造成的。</p>\n</li>\n<li><p>如果标识符已经存在，那么无视之，所以var可以重复声明。</p>\n</li>\n</ul>\n<h3 id=\"声明式环境记录\"><a href=\"#声明式环境记录\" class=\"headerlink\" title=\"声明式环境记录\"></a>声明式环境记录</h3><p>同样的，声明式环境记录也比较特殊，它只记录非var声明的标识符，例如let、const、function……声明的标识符等等。并且它没有关联的绑定对象。</p>\n<ul>\n<li><p>所有声明的标识符（这里应该包含var声明的标识符，但不建立关联）都位于此处。</p>\n</li>\n<li><p>将所有非var声明的标识符实例化，但不初始化，也就是变量处于uninitialized状态。也就是说内存中已经为变量预留出空间，但是还没有和对应的标识符建立绑定关系。</p>\n</li>\n<li><p>在执行上下文的运行（perform状态）阶段，并执行到声明语句时，才会真正初始化并默认赋值为undefined。<br>所以你就懂了，let声明的标识符之前无法访问，就是因为还没有建立绑定。<br>暂存死区的根本原因在此。</p>\n</li>\n<li><p>在声明式环境记录中，<strong>不允许出现重复的标识符</strong>，所以它无法重复。甚至和var声明的标识符冲突。注意，它会在代码加载后的预编译阶段（只能说是运行前，因为JS没有真正的预编译啊……）就已经完成。</p>\n</li>\n</ul>\n<p>全局环境记录包含前两者，是底层记录形式，绑定对象为 window 。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> mul <span class=\"token operator\">=</span> a<span class=\"token operator\">*</span>b <span class=\"token operator\">+</span>sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span>  mul<span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6500</span>\n\n\n<span class=\"token comment\">//词法环境</span>\nFunctionEnv <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">This</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>window<span class=\"token operator\">></span>\n    <span class=\"token literal-property property\">outerEnv</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>GlobalEnv<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ObjRec</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">t</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">mul</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">650</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">DecRec</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBlockEnv<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">This</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>window<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">outerEnv</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span>FunctionEnv<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">DecRec</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token number\">50</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>函数属于声明式环境记录是因为存在块级作用域，var 剥离出的环境记录只有全局作用域和函数作用域。</p>\n<p>声明式对应 LexEnv，对象式对应 VarEnv</p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>this和new</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">this 使用在函数中时被用来指向当前调用函数的对象，也即在对象上使用. or [] 访问属性或者方法时，this就相当于这个对象，如果没有. or []依附对象进行直接访问时，this将指向全局对象（global object），也即访问全局属性&#x2F;变量或者方法&#x2F;函数。\nGlobal execution context in scripts:this指全局对象-一个名字叫global的对象\nGlobal execution context in modules：this返回undefined\n\n\nnew 创建一个崭新的空对象，然后使用指向那个对象的 this 调用特定的函数，修改this对象的属性。如果你没有使用 new 运算符，构造函数会像其他的常规函数一样被调用，并不会创建一个对象。在这种情况下，this 的指向也是不一样的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>for … in object 可以遍历对象的所有属性，利用全局对象Object的方法keys可以获得属性名数组，例如有对象实例student，Object.keys(student)为student的所有属性名数组。判断对象是否包含某一属性可以用 in ，’keyName’ in objectName 是bool值。当通过类实例化时，虽然方法可以访问，in也报true，但方法不属于对象本身，而是属于类。</p>\n<p>const objectName&#x3D;{}，引用关系不可变，但引用内容可变，意思是仍然可以为对象分配属性。</p>\n<p>类也是对象。js引擎会自动把常量包装成对象，以能使用对应的对象方法。如length等。</p>\n<p>ES6中在对象中添加方法时可以不写key而是直接像下面这样</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">objectName&#123;\n...\n\tfuncName(args...)&#123;\n\t...\n\t&#125;\n...\n&#125;;\n\nsame as\n\nobjectName&#123;\n...\n\tfuncName:function(args...)&#123;\n\t...\n\t&#125;\n...\n&#125;;\n\nλ-calculus<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>以下写法在ES6中合法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let obj&#x3D;&#123;\n\tname:&quot;hh&quot;,\n\tage:&quot;13&quot;\n&#125;\n\nlet &#123;name,age&#125;&#x3D;obj;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><code>Object.defineProperty(object, property, methods)</code>\t</p>\n<p>第一个参数是一个对象，第二个参数是给该对象设置的属性名称，第三个参数是配置该属性的方法，比如set&#x2F;get方法</p>\n<p>在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>\n<h2 id=\"防抖节流\"><a href=\"#防抖节流\" class=\"headerlink\" title=\"防抖节流\"></a>防抖节流</h2><p>防抖：多次连续触发只执行一次</p>\n<p>节流：一段时间内连续触发只执行一次，冷却时间过了可以继续</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;div id&#x3D;&quot;content&quot; \n         style&#x3D;&quot;height:150px;\n                line-height:150px;\n                text-align:center; \n                color: #fff;background-color:black;\n                font-size:80px;&quot;&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n \n&lt;script&gt;\n    let num &#x3D; 1;\n    const content &#x3D; document.getElementById(&#39;content&#39;);\n    function count() &#123;\n        content.innerHTML &#x3D; num++;\n    &#125;;\n    content.onmousemove &#x3D; count;\n\t&#x2F;&#x2F;防抖 非立即执行版\n\tfunction debunce(func,wait,...args)&#123;\n        let timeout;\n        return function()&#123;\n            const context &#x3D; this;\n            if(timeout) clearTimeout(timeout);\n            timeout &#x3D; setTimeout(()&#x3D;&gt;&#123;\n                func.apply(context,args);\n            &#125;,wait);\n        &#125;\n    &#125;\n    &#x2F;&#x2F;防抖 立即执行\n    function debunce(func,wait,...args)&#123;\n        let timeout;\n        return function()&#123;\n            const context &#x3D; this;\n            let callNow &#x3D; !timeout;\n            if(timeout) clearTimeout(timeout);\n            timeout &#x3D; setTimeout(()&#x3D;&gt;&#123;\n                timeout &#x3D; null;\n            &#125;,wait)\n            if(callNow) func.apply(context,args);\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F;节流 时间戳立即执行\n    function throttle(func,wait,...args)&#123;\n        let pre&#x3D;0;\n        return function()&#123;\n            const context &#x3D; this;\n            let now &#x3D; Date.now();\n            if(now-pre&gt;&#x3D;wait)&#123;\n                func.apply(context,args);\n                pre&#x3D;Date.now();\n            &#125;\n        &#125;\n    &#125;\n    &#x2F;&#x2F;节流 延时器延迟执行\n    function throttle(func,wait,...args)&#123;\n        let timeout&#x3D;0;\n        return function()&#123;\n            const context &#x3D; this;\n            if(!timeout)&#123;\n                timeout&#x3D;setTimeout(()&#x3D;&gt;&#123;\n                    timeout&#x3D;null;\n                    func.apply(context,args);\n                &#125;,wait);\n            &#125;\n        &#125;\n    &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"异步和同步\"><a href=\"#异步和同步\" class=\"headerlink\" title=\"异步和同步\"></a>异步和同步</h2><p>异步任务分为宏任务和微任务</p>\n<p><strong>宏任务：</strong>script&#x2F;外层同步代码，定时器<code>setTimeout</code>，<code>setInterval</code>，node中的setImmediate，<code>事件绑定</code>，<code>回调函数</code>，<code>node中的fs模块</code></p>\n<p><strong>微任务：</strong><code>new Promise().then(回调)</code>，<code>process.nextTick()</code>，<code>async await</code>,<code>Object.observe</code>,<code>MutaionObserver</code></p>\n<p>Event Loop的执行顺序是：</p>\n<ol>\n<li>首先执行执行栈里的任务。</li>\n<li>执行栈清空后，检查微任务（microtask）队列，将可执行的微任务全部执行。</li>\n<li>取宏任务（macrotask）队列中的第一项执行。</li>\n<li>回到第二步。</li>\n</ol>\n<p>await后面的函数会先执行一遍，然后就会跳出整个async函数来执行后面js栈（后面会详述）的代码。等本轮事件循环执行完了之后又会跳回到async函数中等待await后面表达式的返回值。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&quot;script start&quot;);\n\nasync function async1() &#123;\n  await async2();\n  console.log(&quot;async1 end&quot;);\n&#125;\n\nasync function async2() &#123;\n  console.log(&quot;async2 end&quot;);\n&#125;\n\nasync1();\n\nsetTimeout(function () &#123;\n  console.log(&quot;setTimeout&quot;);\n&#125;, 0);\n\nnew Promise((resolve) &#x3D;&gt; &#123;\n  console.log(&quot;Promise&quot;);\n  resolve();\n&#125;)\n  .then(function () &#123;\n    console.log(&quot;promise1&quot;);\n  &#125;)\n  .then(function () &#123;\n    console.log(&quot;promise2&quot;);\n  &#125;);\n\nconsole.log(&quot;script end&quot;);\n&#x2F;&#x2F; script start &#x3D;&gt; async2 end &#x3D;&gt; Promise &#x3D;&gt; script end &#x3D;&gt; async1 end&#x3D;&gt; promise1 &#x3D;&gt; promise2 &#x3D;&gt; setTimeout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Promise</p>\n<p>第一段调用了Promise构造函数，第二段是调用了promise实例的.then方法。promise的构造函数是同步执行，promise.then中的函数是异步执行。</p>\n<p>promise实例有三种状态：</p>\n<ul>\n<li>pending（待定）</li>\n<li>fulfilled（已执行）&#x2F;或者也可形象地叫做resolved</li>\n<li>rejected（已拒绝）</li>\n</ul>\n<p>调用resolve和reject能将分别将promise实例的状态变成fulfilled和rejected，只有状态变成已完成（即fulfilled和rejected之一），才能触发状态的回调</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 做一些事情\n  &#x2F;&#x2F; 然后在某些条件下resolve，或者reject\n  if (&#x2F;* 条件随便写^_^ *&#x2F;) &#123;\n    resolve()\n  &#125; else &#123;\n    reject()\n  &#125;\n&#125;)\n\np.then(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 如果p的状态被resolve了，就进入这里\n&#125;, () &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 如果p的状态被reject\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><p>多个 then() 链式调用，<strong>并不是连续的创建了多个微任务并推入微任务队列</strong>，因为 then() 的返回值必然是一个 Promise，而后续的 then() 是上一步 then() 返回的 Promise 的回调</p>\n</li>\n<li><p>按照规范</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">async function async1()&#123;\n  console.log(&#39;async1 start&#39;)\n  await async2()\n  console.log(&#39;async1 end&#39;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以转化为：</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">function async1()&#123;\n  console.log(&#39;async1 start&#39;)\n  return RESOLVE(async2())\n      .then(() &#x3D;&gt; &#123; console.log(&#39;async1 end&#39;) &#125;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>RESOLVE(p)</code>接近于<code>Promise.resolve(p)</code>，不过有微妙而重要的区别：p 如果本身已经是 Promise 实例，Promise.resolve 会直接返回 p 而不是产生一个新 promise；</p>\n</li>\n<li><p>如果<code>RESOLVE(p)</code>严格按照标准，应该产生一个新的 promise，尽管该 promise 确定会 resolve 为 p，<strong>但这个过程本身是异步的</strong>，也就是现在进入 job 队列的是<strong>新 promise 的 resolve 过程</strong>，所以该 promise 的 then 不会被立即调用，而要等到当前 job 队列执行到前述 resolve 过程才会被调用，然后其回调（也就是继续 await 之后的语句）才加入 job 队列，所以时序上就晚了</p>\n</li>\n<li><p>所以上述的 async1 函数我们可以进一步转换一下：</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">function async1()&#123;\n  console.log(&#39;async1 start&#39;)\n  return new Promise(resolve &#x3D;&gt; resolve(async2()))\n    .then(() &#x3D;&gt; &#123;\n      console.log(&#39;async1 end&#39;)\n    &#125;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON对象有两个方法。JSON支持三种类型值：简单值（不包括 undefined ，字符串、数字、null，布尔值均可），对象，数组。也没有分号</p>\n<p>JSON.stringify()</p>\n<p>JSON.parse()</p>\n<h2 id=\"网络请求和远程资源\"><a href=\"#网络请求和远程资源\" class=\"headerlink\" title=\"网络请求和远程资源\"></a>网络请求和远程资源</h2><p>Ajax</p>\n<p>asynchronous JavaScript and XML</p>\n<h3 id=\"XMLHttpRequest对象-XHR\"><a href=\"#XMLHttpRequest对象-XHR\" class=\"headerlink\" title=\"XMLHttpRequest对象-XHR\"></a>XMLHttpRequest对象-XHR</h3><p>XHR对象类型</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//XMR方法</span>\n\topen<span class=\"token operator\">:</span>function(method<span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">,</span>isAsync)<span class=\"token punctuation\">,</span><span class=\"token comment\">//必须首先使用的方法</span>\n\tsetRequestHeader<span class=\"token operator\">:</span>function(HeaderKey<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>HeaderValue<span class=\"token operator\">:</span>any)<span class=\"token comment\">//自定义发送头部的信息，必须在open之后，send之前调用此函数。需要区别于浏览器正常发送头部，因为部分浏览器允许重写默认头部，某些则会引起错误</span>\n\tsend<span class=\"token operator\">:</span>function(arg)<span class=\"token punctuation\">,</span><span class=\"token comment\">//参数为请求体数据，不存在请求体时参数需显示设置为 null</span>\n\n\t<span class=\"token comment\">//readyState变化时自动调用此函数</span>\n\tonreadystatechange<span class=\"token operator\">:</span>function()<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">//获取响应头部信息</span>\n\tgetResponseHeaders<span class=\"token operator\">:</span>function(headerKey<span class=\"token operator\">:</span>string)<span class=\"token punctuation\">,</span>\n\tgetAllResponseHeaders()<span class=\"token operator\">:</span>function()<span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token comment\">//send 方法执行得到返回内容之后，这些属性会被填充</span>\n\tresponseType<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\tresponseText<span class=\"token operator\">:</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//响应体文本</span>\n\tresponseXML<span class=\"token operator\">:</span>XML DOM<span class=\"token punctuation\">,</span><span class=\"token comment\">//响应类型为 text/xml 或者 application/xml 时返回的包含响应式数据的 XML DOM 文档</span>\n\tstatus<span class=\"token operator\">:</span>statusCode<span class=\"token punctuation\">,</span><span class=\"token comment\">//响应HTTP状态码 2xx表示成功，304表示资源未修改，直接从浏览器缓存读取，此两种情况都表示响应有效</span>\n\tstatusText<span class=\"token operator\">:</span>'description'<span class=\"token punctuation\">,</span><span class=\"token comment\">//HTTP状态描述信息</span>\n\n\n\t<span class=\"token comment\">//状态属性</span>\n\treadyState<span class=\"token operator\">:</span><span class=\"token number\">0</span>|<span class=\"token number\">1</span>|<span class=\"token number\">2</span>|<span class=\"token number\">3</span>|<span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//五种状态，0表示未调用 open 方法，未初始化，1表示已 open 但未 send，2表示 sent 但未收到响应，3表示收到部分响应 receiving ，4表示完成，已收到所有响应 complete。</span>\n\n\t<span class=\"token comment\">//收到响应之前可调用此方法终止异步请求，同时应当取消对该XHR对象的引用</span>\n\tabort<span class=\"token operator\">:</span>function()<span class=\"token punctuation\">,</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//创建XHR对象</span>\n<span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//使用XMR对象</span>\n<span class=\"token comment\">//首先必须使用open方法，三个参数依次是\t请求类型：string，请求URL：string，是否异步：Boolean；这里的URL是相对于代码所在的页面的，必须遵守同源策略（同一域名，同一端口，同一协议），否则抛出安全错误。</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'example.com'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myHaeder'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'myValue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>send时XHR默认会发送的头部字段：</p>\n<ul>\n<li>Accept 浏览器可以处理的内容类型</li>\n<li>Accept-Charset 浏览器支持显示的字符集</li>\n<li>Accept-Encoding 浏览器可以处理的压缩编码类型</li>\n<li>Accept-Language 浏览器使用的语言</li>\n<li>Connection 浏览器与服务器的连接类型</li>\n<li>Cookie 页面中设置的Cookie</li>\n<li>Host 发送请求的页面所在的域</li>\n<li>Referer 发送请求的页面的 URL ，将错就错，正确拼法是 referre</li>\n<li>User-Agent 浏览器的用户代理字符串</li>\n</ul>\n<h4 id=\"Get请求\"><a href=\"#Get请求\" class=\"headerlink\" title=\"Get请求\"></a>Get请求</h4><p>The <code>encodeURIComponent()</code> method <strong>encodes</strong> a URI component. Use the <a href=\"https://www.w3schools.com/jsref/jsref_decodeuricomponent.asp\">decodeURIComponent()</a> function to <strong>decode</strong> an encoded URI component.</p>\n<h4 id=\"Post请求\"><a href=\"#Post请求\" class=\"headerlink\" title=\"Post请求\"></a>Post请求</h4><h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>跨域资源共享 Cross-origin Resource Share使用场景：</p>\n<ul>\n<li>由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch APIs</a> 发起的跨源 HTTP 请求。</li>\n<li>Web 字体 (CSS 中通过 <code>@font-face</code> 使用跨源字体资源)，<a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 贴图</a></li>\n<li>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>drawImage</code></a> 将 Images&#x2F;video 画面绘制到 canvas。</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images\">来自图像的 CSS 图形 (en-US)</a></li>\n</ul>\n<p>跨源资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\"><code>GET</code></a> 以外的 HTTP 请求，或者搭配某些 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME 类型</a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\"><code>POST</code></a> 请求），浏览器必须首先使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨源请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\">Cookies</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication\">HTTP 认证</a> 相关数据）。</p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>setInterval();  指每隔多少毫秒执行一次函数。因此它有两个参数，第一个参数为每次执行的函数，第二个参数为毫秒。如setInterval( fn, 16 )，返回值为id，用于标识一个setInterval调用。 </p>\n<p>setTimeout() 方法只运行一次，也就是说当达到设定的时间后就开始运行指定的代码，运行完后就结束了，次数是一次。 setInterval() 是循环执行的，即每达到指定的时间间隔就执行相应的函数或者表达式，只要窗口不关闭或clearInterval() 调用就会无限循环下去。</p>\n<p>date对象，包含一系列获取时间的方法</p>\n<h2 id=\"Control-abstraction-objects\"><a href=\"#Control-abstraction-objects\" class=\"headerlink\" title=\"Control abstraction objects\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects\">Control abstraction objects</a></h2><p>控制抽象对象</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\"><code>Generator</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\"><code>AsyncGenerator</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\"><code>AsyncGeneratorFunction</code></a></li>\n</ul>\n<h2 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h2><p><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const p &#x3D; new Proxy(target, handler)\n\nhandler \n包含捕捉器（trap）的占位符对象，可译为处理器对象。\ntraps\n提供属性访问的方法。这类似于操作系统中捕获器的概念。\ntarget\n被 Proxy 代理虚拟化的对象。它常被作为代理的存储后端。根据目标验证关于对象不可扩展性或不可配置属性的不变量（保持不变的语义）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><code>Proxy.revocable()</code></strong> 方法可以用来创建一个可撤销的代理对象。细节见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable\">此处</a>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Proxy.revocable(target, handler);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl9v1yib00001lwvp1v6u7jz9","tag_id":"cl9v1yib30002lwvp667h82aa","_id":"cl9v1yib50003lwvp74nu6p6w"}],"Tag":[{"name":"JavaScript","_id":"cl9v1yib30002lwvp667h82aa"}]}}